<launch>

  <arg name="verbose_publishing" default="true"/> <!-- If false the node will only publish when there is some face detected -->
  <arg name="rate"               default="5"/>    <!-- Rate at which the node will look for faces and publish -->
  <arg name="image_topic"        default="/xtion/rgb/image_raw"/>

  <node name="pal_face" pkg="pal_face_detector_opencv" type="pal_face_detector_opencv" args="$(arg verbose_publishing) $(arg rate)" output="screen">
    <remap from="/pal_face/image" to="$(arg image_topic)"/>
    <rosparam>
      processing_img_width:  320
      processing_img_height: 240
      rel_min_eye_dist:      0.02  
      rel_max_eye_dist:      0.2
    </rosparam>
  </node>

<!--
  This node is for turning the head scan to a laser scan, provides head collision if any 
-->
    <node pkg="pointcloud_to_laserscan" type="pointcloud_to_laserscan_node" name="pointcloud_to_laserscan">
      <remap from="cloud_in" to="/throttle_filtering_points/filtered_points"/>
      <remap from="scan" to="/camera/scan" />
      <rosparam>
        target_frame: map
        transform_tolerance: 0.01
        min_height: 0.5
        max_height: 1.0
        
        angle_min: -3.14159
        angle_max: 3.14159
        angle_increment: 0.01
        scan_time: 0.3333
        range_min: 0.4
        range_max: 6.0
        use_inf: true
        
        #concurrency_level affects number of pc queued for processing and the number of threadsused
        # 0: Detect number of cores
        # 1: Single threaded
        # 2: inf : Parallelism level
        concurrency_level: 1
      </rosparam>
    </node>

    <node pkg="par_a3" type="move_amcl.py" name="move_amcl" output="screen"></node>
</launch>