;; Auto-generated. Do not edit!


(when (boundp 'pal_interaction_msgs::TtsAction)
  (if (not (find-package "PAL_INTERACTION_MSGS"))
    (make-package "PAL_INTERACTION_MSGS"))
  (shadow 'TtsAction (find-package "PAL_INTERACTION_MSGS")))
(unless (find-package "PAL_INTERACTION_MSGS::TTSACTION")
  (make-package "PAL_INTERACTION_MSGS::TTSACTION"))

(in-package "ROS")
;;//! \htmlinclude TtsAction.msg.html


(defclass pal_interaction_msgs::TtsAction
  :super ros::object
  :slots (_action_goal _action_result _action_feedback ))

(defmethod pal_interaction_msgs::TtsAction
  (:init
   (&key
    ((:action_goal __action_goal) (instance pal_interaction_msgs::TtsActionGoal :init))
    ((:action_result __action_result) (instance pal_interaction_msgs::TtsActionResult :init))
    ((:action_feedback __action_feedback) (instance pal_interaction_msgs::TtsActionFeedback :init))
    )
   (send-super :init)
   (setq _action_goal __action_goal)
   (setq _action_result __action_result)
   (setq _action_feedback __action_feedback)
   self)
  (:action_goal
   (&rest __action_goal)
   (if (keywordp (car __action_goal))
       (send* _action_goal __action_goal)
     (progn
       (if __action_goal (setq _action_goal (car __action_goal)))
       _action_goal)))
  (:action_result
   (&rest __action_result)
   (if (keywordp (car __action_result))
       (send* _action_result __action_result)
     (progn
       (if __action_result (setq _action_result (car __action_result)))
       _action_result)))
  (:action_feedback
   (&rest __action_feedback)
   (if (keywordp (car __action_feedback))
       (send* _action_feedback __action_feedback)
     (progn
       (if __action_feedback (setq _action_feedback (car __action_feedback)))
       _action_feedback)))
  (:serialization-length
   ()
   (+
    ;; pal_interaction_msgs/TtsActionGoal _action_goal
    (send _action_goal :serialization-length)
    ;; pal_interaction_msgs/TtsActionResult _action_result
    (send _action_result :serialization-length)
    ;; pal_interaction_msgs/TtsActionFeedback _action_feedback
    (send _action_feedback :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; pal_interaction_msgs/TtsActionGoal _action_goal
       (send _action_goal :serialize s)
     ;; pal_interaction_msgs/TtsActionResult _action_result
       (send _action_result :serialize s)
     ;; pal_interaction_msgs/TtsActionFeedback _action_feedback
       (send _action_feedback :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; pal_interaction_msgs/TtsActionGoal _action_goal
     (send _action_goal :deserialize buf ptr-) (incf ptr- (send _action_goal :serialization-length))
   ;; pal_interaction_msgs/TtsActionResult _action_result
     (send _action_result :deserialize buf ptr-) (incf ptr- (send _action_result :serialization-length))
   ;; pal_interaction_msgs/TtsActionFeedback _action_feedback
     (send _action_feedback :deserialize buf ptr-) (incf ptr- (send _action_feedback :serialization-length))
   ;;
   self)
  )

(setf (get pal_interaction_msgs::TtsAction :md5sum-) "973ac2281b44b7ee789af997a9ce140c")
(setf (get pal_interaction_msgs::TtsAction :datatype-) "pal_interaction_msgs/TtsAction")
(setf (get pal_interaction_msgs::TtsAction :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

TtsActionGoal action_goal
TtsActionResult action_result
TtsActionFeedback action_feedback

================================================================================
MSG: pal_interaction_msgs/TtsActionGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalID goal_id
TtsGoal goal

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: actionlib_msgs/GoalID
# The stamp should store the time at which this goal was requested.
# It is used by an action server when it tries to preempt all
# goals that were requested before a certain time
time stamp

# The id provides a way to associate feedback and
# result message with specific goal requests. The id
# specified must be unique.
string id


================================================================================
MSG: pal_interaction_msgs/TtsGoal
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
## goal definition

# utterance will contain indications to construct
# the text to be spoken.
# It must be specified in a section/key format 
# for internationalisation. The actual text will
# be obtained from configuration files as in pal_tts_cfg pkg.
 
I18nText text
TtsText rawtext

# This is to suggest a voice name to the 
# tts engine. For the same language we might have
# a variety of voices available, and this variable 
# is to choose one among them. 
# (not implemented yet)
string speakerName

# Time to wait before synthesising the text itself.
# It can be used to produced delayed speech.
float64 wait_before_speaking


================================================================================
MSG: pal_interaction_msgs/I18nText
# section/key is used as in examples in the pal_tts_cfg pkg.
string section
string key

# language id, must be speficied using RFC 3066
string lang_id

# arguments contain the values by which 
# occurrences of '%s' will be replaced in the 
# main text.
# This only supports up to 2 arguments and no recursion.
# However, recursion and more argumnents are
# planned to be supported in the future.
I18nArgument[] arguments

================================================================================
MSG: pal_interaction_msgs/I18nArgument
# section key, override the value in expanded.
# Use expanded for text that do not need expansion.
# Please note that expanded here will not be translated 
# to any language.

string section
string key
string expanded


================================================================================
MSG: pal_interaction_msgs/TtsText
# this message is to specify 
# raw text to the TTS server. 

string text

# Language id in RFC 3066 format
# This field is mandatory
string lang_id
================================================================================
MSG: pal_interaction_msgs/TtsActionResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
TtsResult result

================================================================================
MSG: actionlib_msgs/GoalStatus
GoalID goal_id
uint8 status
uint8 PENDING         = 0   # The goal has yet to be processed by the action server
uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                            #   and has since completed its execution (Terminal State)
uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                            #    to some failure (Terminal State)
uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                            #    because the goal was unattainable or invalid (Terminal State)
uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                            #    and has not yet completed execution
uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                            #    but the action server has not yet confirmed that the goal is canceled
uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                            #    and was successfully cancelled (Terminal State)
uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                            #    sent over the wire by an action server

#Allow for the user to associate a string with GoalStatus for debugging
string text


================================================================================
MSG: pal_interaction_msgs/TtsResult
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
## result definition

# Variable text will contain
# the actual text to be spoken
string text

# Msg will contain a warning/error message
# in case something happens during synthesis.

string msg

================================================================================
MSG: pal_interaction_msgs/TtsActionFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======

Header header
actionlib_msgs/GoalStatus status
TtsFeedback feedback

================================================================================
MSG: pal_interaction_msgs/TtsFeedback
# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
## feedback

# Everytime one of the following events occuring
# during the synthesis process a feedback message
# will be published.
# Only TTS_EVENT_STARTED_PLAYING_WORD and 
# TTS_EVENT_MARK are implemented now.

uint16 TTS_EVENT_INITIALIZATION = 1
uint16 TTS_EVENT_SHUTDOWN = 2
uint16 TTS_EVENT_SYNCHRONIZATION = 4
uint16 TTS_EVENT_FINISHED_PLAYING_UTTERANCE = 8
uint16 TTS_EVENT_MARK = 16
uint16 TTS_EVENT_STARTED_PLAYING_WORD = 32
uint16 TTS_EVENT_FINISHED_PLAYING_PHRASE = 64
uint16 TTS_EVENT_FINISHED_PLAYING_SENTENCE = 128
uint16 TTS_EVENT_VISEME = 256

# Store the event type and can be used
# to filter messages depending on the type of 
# events we are interested in

uint16 event_type

# Time since the begining of the synthesis
# at which the event occured.

time timestamp

# Text said until now, 
# it will contain the current word in case of WORD events

string text_said

# Next word to be pronounced
# (not implemented)
string next_word

string viseme_id

# Everytime a mark like this one
# <mark name=\"markname\"/> is present in the text
# a MARK event will be generated with the 'name' 
# argument value as mark id. Other fields
# different from the mark_id are not implemented.

TtsMark marks


================================================================================
MSG: pal_interaction_msgs/TtsMark
# id will contain the value of name argument in the <mark/>
# tags when they are placed in synthesised text.
# Filling keys and value is not implemented yet.
string id
string[] keys
string[] value
")



(provide :pal_interaction_msgs/TtsAction "973ac2281b44b7ee789af997a9ce140c")


