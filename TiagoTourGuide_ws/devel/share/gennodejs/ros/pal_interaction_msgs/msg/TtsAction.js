// Auto-generated. Do not edit!

// (in-package pal_interaction_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let TtsActionGoal = require('./TtsActionGoal.js');
let TtsActionResult = require('./TtsActionResult.js');
let TtsActionFeedback = require('./TtsActionFeedback.js');

//-----------------------------------------------------------

class TtsAction {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.action_goal = null;
      this.action_result = null;
      this.action_feedback = null;
    }
    else {
      if (initObj.hasOwnProperty('action_goal')) {
        this.action_goal = initObj.action_goal
      }
      else {
        this.action_goal = new TtsActionGoal();
      }
      if (initObj.hasOwnProperty('action_result')) {
        this.action_result = initObj.action_result
      }
      else {
        this.action_result = new TtsActionResult();
      }
      if (initObj.hasOwnProperty('action_feedback')) {
        this.action_feedback = initObj.action_feedback
      }
      else {
        this.action_feedback = new TtsActionFeedback();
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type TtsAction
    // Serialize message field [action_goal]
    bufferOffset = TtsActionGoal.serialize(obj.action_goal, buffer, bufferOffset);
    // Serialize message field [action_result]
    bufferOffset = TtsActionResult.serialize(obj.action_result, buffer, bufferOffset);
    // Serialize message field [action_feedback]
    bufferOffset = TtsActionFeedback.serialize(obj.action_feedback, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type TtsAction
    let len;
    let data = new TtsAction(null);
    // Deserialize message field [action_goal]
    data.action_goal = TtsActionGoal.deserialize(buffer, bufferOffset);
    // Deserialize message field [action_result]
    data.action_result = TtsActionResult.deserialize(buffer, bufferOffset);
    // Deserialize message field [action_feedback]
    data.action_feedback = TtsActionFeedback.deserialize(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += TtsActionGoal.getMessageSize(object.action_goal);
    length += TtsActionResult.getMessageSize(object.action_result);
    length += TtsActionFeedback.getMessageSize(object.action_feedback);
    return length;
  }

  static datatype() {
    // Returns string type for a message object
    return 'pal_interaction_msgs/TtsAction';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '973ac2281b44b7ee789af997a9ce140c';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    TtsActionGoal action_goal
    TtsActionResult action_result
    TtsActionFeedback action_feedback
    
    ================================================================================
    MSG: pal_interaction_msgs/TtsActionGoal
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalID goal_id
    TtsGoal goal
    
    ================================================================================
    MSG: std_msgs/Header
    # Standard metadata for higher-level stamped data types.
    # This is generally used to communicate timestamped data 
    # in a particular coordinate frame.
    # 
    # sequence ID: consecutively increasing ID 
    uint32 seq
    #Two-integer timestamp that is expressed as:
    # * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
    # * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
    # time-handling sugar is provided by the client library
    time stamp
    #Frame this data is associated with
    string frame_id
    
    ================================================================================
    MSG: actionlib_msgs/GoalID
    # The stamp should store the time at which this goal was requested.
    # It is used by an action server when it tries to preempt all
    # goals that were requested before a certain time
    time stamp
    
    # The id provides a way to associate feedback and
    # result message with specific goal requests. The id
    # specified must be unique.
    string id
    
    
    ================================================================================
    MSG: pal_interaction_msgs/TtsGoal
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    ## goal definition
    
    # utterance will contain indications to construct
    # the text to be spoken.
    # It must be specified in a section/key format 
    # for internationalisation. The actual text will
    # be obtained from configuration files as in pal_tts_cfg pkg.
     
    I18nText text
    TtsText rawtext
    
    # This is to suggest a voice name to the 
    # tts engine. For the same language we might have
    # a variety of voices available, and this variable 
    # is to choose one among them. 
    # (not implemented yet)
    string speakerName
    
    # Time to wait before synthesising the text itself.
    # It can be used to produced delayed speech.
    float64 wait_before_speaking
    
    
    ================================================================================
    MSG: pal_interaction_msgs/I18nText
    # section/key is used as in examples in the pal_tts_cfg pkg.
    string section
    string key
    
    # language id, must be speficied using RFC 3066
    string lang_id
    
    # arguments contain the values by which 
    # occurrences of '%s' will be replaced in the 
    # main text.
    # This only supports up to 2 arguments and no recursion.
    # However, recursion and more argumnents are
    # planned to be supported in the future.
    I18nArgument[] arguments
    
    ================================================================================
    MSG: pal_interaction_msgs/I18nArgument
    # section key, override the value in expanded.
    # Use expanded for text that do not need expansion.
    # Please note that expanded here will not be translated 
    # to any language.
    
    string section
    string key
    string expanded
    
    
    ================================================================================
    MSG: pal_interaction_msgs/TtsText
    # this message is to specify 
    # raw text to the TTS server. 
    
    string text
    
    # Language id in RFC 3066 format
    # This field is mandatory
    string lang_id
    ================================================================================
    MSG: pal_interaction_msgs/TtsActionResult
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalStatus status
    TtsResult result
    
    ================================================================================
    MSG: actionlib_msgs/GoalStatus
    GoalID goal_id
    uint8 status
    uint8 PENDING         = 0   # The goal has yet to be processed by the action server
    uint8 ACTIVE          = 1   # The goal is currently being processed by the action server
    uint8 PREEMPTED       = 2   # The goal received a cancel request after it started executing
                                #   and has since completed its execution (Terminal State)
    uint8 SUCCEEDED       = 3   # The goal was achieved successfully by the action server (Terminal State)
    uint8 ABORTED         = 4   # The goal was aborted during execution by the action server due
                                #    to some failure (Terminal State)
    uint8 REJECTED        = 5   # The goal was rejected by the action server without being processed,
                                #    because the goal was unattainable or invalid (Terminal State)
    uint8 PREEMPTING      = 6   # The goal received a cancel request after it started executing
                                #    and has not yet completed execution
    uint8 RECALLING       = 7   # The goal received a cancel request before it started executing,
                                #    but the action server has not yet confirmed that the goal is canceled
    uint8 RECALLED        = 8   # The goal received a cancel request before it started executing
                                #    and was successfully cancelled (Terminal State)
    uint8 LOST            = 9   # An action client can determine that a goal is LOST. This should not be
                                #    sent over the wire by an action server
    
    #Allow for the user to associate a string with GoalStatus for debugging
    string text
    
    
    ================================================================================
    MSG: pal_interaction_msgs/TtsResult
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    ## result definition
    
    # Variable text will contain
    # the actual text to be spoken
    string text
    
    # Msg will contain a warning/error message
    # in case something happens during synthesis.
    
    string msg
    
    ================================================================================
    MSG: pal_interaction_msgs/TtsActionFeedback
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    
    Header header
    actionlib_msgs/GoalStatus status
    TtsFeedback feedback
    
    ================================================================================
    MSG: pal_interaction_msgs/TtsFeedback
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    ## feedback
    
    # Everytime one of the following events occuring
    # during the synthesis process a feedback message
    # will be published.
    # Only TTS_EVENT_STARTED_PLAYING_WORD and 
    # TTS_EVENT_MARK are implemented now.
    
    uint16 TTS_EVENT_INITIALIZATION = 1
    uint16 TTS_EVENT_SHUTDOWN = 2
    uint16 TTS_EVENT_SYNCHRONIZATION = 4
    uint16 TTS_EVENT_FINISHED_PLAYING_UTTERANCE = 8
    uint16 TTS_EVENT_MARK = 16
    uint16 TTS_EVENT_STARTED_PLAYING_WORD = 32
    uint16 TTS_EVENT_FINISHED_PLAYING_PHRASE = 64
    uint16 TTS_EVENT_FINISHED_PLAYING_SENTENCE = 128
    uint16 TTS_EVENT_VISEME = 256
    
    # Store the event type and can be used
    # to filter messages depending on the type of 
    # events we are interested in
    
    uint16 event_type
    
    # Time since the begining of the synthesis
    # at which the event occured.
    
    time timestamp
    
    # Text said until now, 
    # it will contain the current word in case of WORD events
    
    string text_said
    
    # Next word to be pronounced
    # (not implemented)
    string next_word
    
    string viseme_id
    
    # Everytime a mark like this one
    # <mark name="markname"/> is present in the text
    # a MARK event will be generated with the 'name' 
    # argument value as mark id. Other fields
    # different from the mark_id are not implemented.
    
    TtsMark marks
    
    
    ================================================================================
    MSG: pal_interaction_msgs/TtsMark
    # id will contain the value of name argument in the <mark/>
    # tags when they are placed in synthesised text.
    # Filling keys and value is not implemented yet.
    string id
    string[] keys
    string[] value
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new TtsAction(null);
    if (msg.action_goal !== undefined) {
      resolved.action_goal = TtsActionGoal.Resolve(msg.action_goal)
    }
    else {
      resolved.action_goal = new TtsActionGoal()
    }

    if (msg.action_result !== undefined) {
      resolved.action_result = TtsActionResult.Resolve(msg.action_result)
    }
    else {
      resolved.action_result = new TtsActionResult()
    }

    if (msg.action_feedback !== undefined) {
      resolved.action_feedback = TtsActionFeedback.Resolve(msg.action_feedback)
    }
    else {
      resolved.action_feedback = new TtsActionFeedback()
    }

    return resolved;
    }
};

module.exports = TtsAction;
