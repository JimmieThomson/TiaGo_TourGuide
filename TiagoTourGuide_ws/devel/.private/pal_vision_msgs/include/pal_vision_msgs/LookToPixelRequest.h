// Generated by gencpp from file pal_vision_msgs/LookToPixelRequest.msg
// DO NOT EDIT!


#ifndef PAL_VISION_MSGS_MESSAGE_LOOKTOPIXELREQUEST_H
#define PAL_VISION_MSGS_MESSAGE_LOOKTOPIXELREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pal_vision_msgs
{
template <class ContainerAllocator>
struct LookToPixelRequest_
{
  typedef LookToPixelRequest_<ContainerAllocator> Type;

  LookToPixelRequest_()
    : x(0.0)
    , y(0.0)  {
    }
  LookToPixelRequest_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;

   typedef float _y_type;
  _y_type y;





  typedef boost::shared_ptr< ::pal_vision_msgs::LookToPixelRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pal_vision_msgs::LookToPixelRequest_<ContainerAllocator> const> ConstPtr;

}; // struct LookToPixelRequest_

typedef ::pal_vision_msgs::LookToPixelRequest_<std::allocator<void> > LookToPixelRequest;

typedef boost::shared_ptr< ::pal_vision_msgs::LookToPixelRequest > LookToPixelRequestPtr;
typedef boost::shared_ptr< ::pal_vision_msgs::LookToPixelRequest const> LookToPixelRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pal_vision_msgs::LookToPixelRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pal_vision_msgs::LookToPixelRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pal_vision_msgs::LookToPixelRequest_<ContainerAllocator1> & lhs, const ::pal_vision_msgs::LookToPixelRequest_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pal_vision_msgs::LookToPixelRequest_<ContainerAllocator1> & lhs, const ::pal_vision_msgs::LookToPixelRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pal_vision_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pal_vision_msgs::LookToPixelRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pal_vision_msgs::LookToPixelRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_vision_msgs::LookToPixelRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_vision_msgs::LookToPixelRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_vision_msgs::LookToPixelRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_vision_msgs::LookToPixelRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pal_vision_msgs::LookToPixelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff8d7d66dd3e4b731ef14a45d38888b6";
  }

  static const char* value(const ::pal_vision_msgs::LookToPixelRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xff8d7d66dd3e4b73ULL;
  static const uint64_t static_value2 = 0x1ef14a45d38888b6ULL;
};

template<class ContainerAllocator>
struct DataType< ::pal_vision_msgs::LookToPixelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pal_vision_msgs/LookToPixelRequest";
  }

  static const char* value(const ::pal_vision_msgs::LookToPixelRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pal_vision_msgs::LookToPixelRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "## Service message to make the robot look towards a direction defined by a pixel of its left camera\n"
"## The service is implemented in personServer at /personServer/lookToPixel\n"
"##\n"
"## The parameters of the service are the pixel coordinates (x,y) expressed relative to the image width and height. \n"
"## For instance, if the service is called with (x,y) = (1, 0) then the robot will look the right side; if (x,y) = (0.5, 0.5) the robot\n"
"## will look forward; if (0.5, 1) the robot will look downwards; etc.\n"
"\n"
"float32 x\n"
"float32 y\n"
;
  }

  static const char* value(const ::pal_vision_msgs::LookToPixelRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pal_vision_msgs::LookToPixelRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LookToPixelRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pal_vision_msgs::LookToPixelRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pal_vision_msgs::LookToPixelRequest_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PAL_VISION_MSGS_MESSAGE_LOOKTOPIXELREQUEST_H
