// Generated by gencpp from file pal_navigation_msgs/ExecuteParkingGoal.msg
// DO NOT EDIT!


#ifndef PAL_NAVIGATION_MSGS_MESSAGE_EXECUTEPARKINGGOAL_H
#define PAL_NAVIGATION_MSGS_MESSAGE_EXECUTEPARKINGGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pal_navigation_msgs
{
template <class ContainerAllocator>
struct ExecuteParkingGoal_
{
  typedef ExecuteParkingGoal_<ContainerAllocator> Type;

  ExecuteParkingGoal_()
    : source_frame()
    , target_frame()
    , backwards(false)
    , max_lin_vel(0.0)
    , max_rot_vel(0.0)  {
    }
  ExecuteParkingGoal_(const ContainerAllocator& _alloc)
    : source_frame(_alloc)
    , target_frame(_alloc)
    , backwards(false)
    , max_lin_vel(0.0)
    , max_rot_vel(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _source_frame_type;
  _source_frame_type source_frame;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _target_frame_type;
  _target_frame_type target_frame;

   typedef uint8_t _backwards_type;
  _backwards_type backwards;

   typedef double _max_lin_vel_type;
  _max_lin_vel_type max_lin_vel;

   typedef double _max_rot_vel_type;
  _max_rot_vel_type max_rot_vel;





  typedef boost::shared_ptr< ::pal_navigation_msgs::ExecuteParkingGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pal_navigation_msgs::ExecuteParkingGoal_<ContainerAllocator> const> ConstPtr;

}; // struct ExecuteParkingGoal_

typedef ::pal_navigation_msgs::ExecuteParkingGoal_<std::allocator<void> > ExecuteParkingGoal;

typedef boost::shared_ptr< ::pal_navigation_msgs::ExecuteParkingGoal > ExecuteParkingGoalPtr;
typedef boost::shared_ptr< ::pal_navigation_msgs::ExecuteParkingGoal const> ExecuteParkingGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pal_navigation_msgs::ExecuteParkingGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pal_navigation_msgs::ExecuteParkingGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pal_navigation_msgs::ExecuteParkingGoal_<ContainerAllocator1> & lhs, const ::pal_navigation_msgs::ExecuteParkingGoal_<ContainerAllocator2> & rhs)
{
  return lhs.source_frame == rhs.source_frame &&
    lhs.target_frame == rhs.target_frame &&
    lhs.backwards == rhs.backwards &&
    lhs.max_lin_vel == rhs.max_lin_vel &&
    lhs.max_rot_vel == rhs.max_rot_vel;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pal_navigation_msgs::ExecuteParkingGoal_<ContainerAllocator1> & lhs, const ::pal_navigation_msgs::ExecuteParkingGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pal_navigation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pal_navigation_msgs::ExecuteParkingGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pal_navigation_msgs::ExecuteParkingGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_navigation_msgs::ExecuteParkingGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_navigation_msgs::ExecuteParkingGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_navigation_msgs::ExecuteParkingGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_navigation_msgs::ExecuteParkingGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pal_navigation_msgs::ExecuteParkingGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "63333f38d3232e64556e90a5308fc7b4";
  }

  static const char* value(const ::pal_navigation_msgs::ExecuteParkingGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x63333f38d3232e64ULL;
  static const uint64_t static_value2 = 0x556e90a5308fc7b4ULL;
};

template<class ContainerAllocator>
struct DataType< ::pal_navigation_msgs::ExecuteParkingGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pal_navigation_msgs/ExecuteParkingGoal";
  }

  static const char* value(const ::pal_navigation_msgs::ExecuteParkingGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pal_navigation_msgs::ExecuteParkingGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal definition\n"
"string source_frame\n"
"string target_frame\n"
"bool backwards\n"
"float64 max_lin_vel\n"
"float64 max_rot_vel\n"
;
  }

  static const char* value(const ::pal_navigation_msgs::ExecuteParkingGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pal_navigation_msgs::ExecuteParkingGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.source_frame);
      stream.next(m.target_frame);
      stream.next(m.backwards);
      stream.next(m.max_lin_vel);
      stream.next(m.max_rot_vel);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ExecuteParkingGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pal_navigation_msgs::ExecuteParkingGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pal_navigation_msgs::ExecuteParkingGoal_<ContainerAllocator>& v)
  {
    s << indent << "source_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.source_frame);
    s << indent << "target_frame: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.target_frame);
    s << indent << "backwards: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.backwards);
    s << indent << "max_lin_vel: ";
    Printer<double>::stream(s, indent + "  ", v.max_lin_vel);
    s << indent << "max_rot_vel: ";
    Printer<double>::stream(s, indent + "  ", v.max_rot_vel);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PAL_NAVIGATION_MSGS_MESSAGE_EXECUTEPARKINGGOAL_H
