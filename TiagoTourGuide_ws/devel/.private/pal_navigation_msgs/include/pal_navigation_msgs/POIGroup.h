// Generated by gencpp from file pal_navigation_msgs/POIGroup.msg
// DO NOT EDIT!


#ifndef PAL_NAVIGATION_MSGS_MESSAGE_POIGROUP_H
#define PAL_NAVIGATION_MSGS_MESSAGE_POIGROUP_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>
#include <std_msgs/String.h>

namespace pal_navigation_msgs
{
template <class ContainerAllocator>
struct POIGroup_
{
  typedef POIGroup_<ContainerAllocator> Type;

  POIGroup_()
    : group_name()
    , poi_names()  {
    }
  POIGroup_(const ContainerAllocator& _alloc)
    : group_name(_alloc)
    , poi_names(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::String_<ContainerAllocator>  _group_name_type;
  _group_name_type group_name;

   typedef std::vector< ::std_msgs::String_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::std_msgs::String_<ContainerAllocator> >> _poi_names_type;
  _poi_names_type poi_names;





  typedef boost::shared_ptr< ::pal_navigation_msgs::POIGroup_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pal_navigation_msgs::POIGroup_<ContainerAllocator> const> ConstPtr;

}; // struct POIGroup_

typedef ::pal_navigation_msgs::POIGroup_<std::allocator<void> > POIGroup;

typedef boost::shared_ptr< ::pal_navigation_msgs::POIGroup > POIGroupPtr;
typedef boost::shared_ptr< ::pal_navigation_msgs::POIGroup const> POIGroupConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pal_navigation_msgs::POIGroup_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pal_navigation_msgs::POIGroup_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pal_navigation_msgs::POIGroup_<ContainerAllocator1> & lhs, const ::pal_navigation_msgs::POIGroup_<ContainerAllocator2> & rhs)
{
  return lhs.group_name == rhs.group_name &&
    lhs.poi_names == rhs.poi_names;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pal_navigation_msgs::POIGroup_<ContainerAllocator1> & lhs, const ::pal_navigation_msgs::POIGroup_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pal_navigation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pal_navigation_msgs::POIGroup_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pal_navigation_msgs::POIGroup_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_navigation_msgs::POIGroup_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_navigation_msgs::POIGroup_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_navigation_msgs::POIGroup_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_navigation_msgs::POIGroup_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pal_navigation_msgs::POIGroup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b26e4f03643dc943e8e2917c6c6e5767";
  }

  static const char* value(const ::pal_navigation_msgs::POIGroup_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb26e4f03643dc943ULL;
  static const uint64_t static_value2 = 0xe8e2917c6c6e5767ULL;
};

template<class ContainerAllocator>
struct DataType< ::pal_navigation_msgs::POIGroup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pal_navigation_msgs/POIGroup";
  }

  static const char* value(const ::pal_navigation_msgs::POIGroup_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pal_navigation_msgs::POIGroup_<ContainerAllocator> >
{
  static const char* value()
  {
    return "std_msgs/String group_name\n"
"std_msgs/String[] poi_names\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::pal_navigation_msgs::POIGroup_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pal_navigation_msgs::POIGroup_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.group_name);
      stream.next(m.poi_names);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct POIGroup_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pal_navigation_msgs::POIGroup_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pal_navigation_msgs::POIGroup_<ContainerAllocator>& v)
  {
    s << indent << "group_name: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.group_name);
    s << indent << "poi_names[]" << std::endl;
    for (size_t i = 0; i < v.poi_names.size(); ++i)
    {
      s << indent << "  poi_names[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "    ", v.poi_names[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PAL_NAVIGATION_MSGS_MESSAGE_POIGROUP_H
