# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pal_navigation_msgs/MapConfiguration.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import geometry_msgs.msg
import nav_msgs.msg
import pal_navigation_msgs.msg
import sensor_msgs.msg
import std_msgs.msg

class MapConfiguration(genpy.Message):
  _md5sum = "ececfa8367e0b051bd8f60942b6b493d"
  _type = "pal_navigation_msgs/MapConfiguration"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#Configuration of a map
int32 numberOfSubMaps

#Highways of the map
pal_navigation_msgs/Highways[] highways

#Points of direction of the map
pal_navigation_msgs/POI pods

#Points of interest of the map
pal_navigation_msgs/POI pois

#Virtual obstacles of the map
pal_navigation_msgs/POI vo

#Zones of interest of the map
pal_navigation_msgs/POI zoi

#Ramps of the map
pal_navigation_msgs/POI ramps

#POI Groups of the map
pal_navigation_msgs/POIGroup[] poigroups

# Deprecated
pal_navigation_msgs/VisualLocDB visualLocDb

#Real (ugly) map 
nav_msgs/OccupancyGrid navigation_map

#Pretty map
sensor_msgs/Image user_map

# Deprecated, now the user_map must be transformed to match the scale/
# orientation of the navigation_map
#Transformation between ugly and pretty map
pal_navigation_msgs/NiceMapTransformation transform



================================================================================
MSG: pal_navigation_msgs/Highways
# Poi (Point of interest)

geometry_msgs/Point[] points

std_msgs/Bool         directional

std_msgs/Float32      line_width

std_msgs/String       name
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: std_msgs/Bool
bool data
================================================================================
MSG: std_msgs/Float32
float32 data
================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: pal_navigation_msgs/POI
# Poi (Point of interest)

sensor_msgs/PointCloud points

std_msgs/String[]      ids

std_msgs/String        map_id

================================================================================
MSG: sensor_msgs/PointCloud
# This message holds a collection of 3d points, plus optional additional
# information about each point.

# Time of sensor data acquisition, coordinate frame ID.
Header header

# Array of 3d points. Each Point32 should be interpreted as a 3d point
# in the frame given in the header.
geometry_msgs/Point32[] points

# Each channel should have the same number of elements as points array,
# and the data in each channel should correspond 1:1 with each point.
# Channel names in common practice are listed in ChannelFloat32.msg.
ChannelFloat32[] channels

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: sensor_msgs/ChannelFloat32
# This message is used by the PointCloud message to hold optional data
# associated with each point in the cloud. The length of the values
# array should be the same as the length of the points array in the
# PointCloud, and each value should be associated with the corresponding
# point.

# Channel names in existing practice include:
#   "u", "v" - row and column (respectively) in the left stereo image.
#              This is opposite to usual conventions but remains for
#              historical reasons. The newer PointCloud2 message has no
#              such problem.
#   "rgb" - For point clouds produced by color stereo cameras. uint8
#           (R,G,B) values packed into the least significant 24 bits,
#           in order.
#   "intensity" - laser or pixel intensity.
#   "distance"

# The channel name should give semantics of the channel (e.g.
# "intensity" instead of "value").
string name

# The values array should be 1-1 with the elements of the associated
# PointCloud.
float32[] values

================================================================================
MSG: pal_navigation_msgs/POIGroup
std_msgs/String group_name
std_msgs/String[] poi_names

================================================================================
MSG: pal_navigation_msgs/VisualLocDB
#Contents of the 3 binary files that contain the visual localization DB

uint8[] documents
uint8[] tree
uint8[] weights

================================================================================
MSG: nav_msgs/OccupancyGrid
# This represents a 2-D grid map, in which each cell represents the probability of
# occupancy.

Header header 

#MetaData for the map
MapMetaData info

# The map data, in row-major order, starting with (0,0).  Occupancy
# probabilities are in the range [0,100].  Unknown is -1.
int8[] data

================================================================================
MSG: nav_msgs/MapMetaData
# This hold basic information about the characterists of the OccupancyGrid

# The time at which the map was loaded
time map_load_time
# The map resolution [m/cell]
float32 resolution
# Map width [cells]
uint32 width
# Map height [cells]
uint32 height
# The origin of the map [m, m, rad].  This is the real-world pose of the
# cell (0,0) in the map.
geometry_msgs/Pose origin
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: sensor_msgs/Image
# This message contains an uncompressed image
# (0, 0) is at top-left corner of image
#

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of camera
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image
                     # If the frame_id here and the frame_id of the CameraInfo
                     # message associated with the image conflict
                     # the behavior is undefined

uint32 height         # image height, that is, number of rows
uint32 width          # image width, that is, number of columns

# The legal values for encoding are in file src/image_encodings.cpp
# If you want to standardize a new string format, join
# ros-users@lists.sourceforge.net and send an email proposing a new encoding.

string encoding       # Encoding of pixels -- channel meaning, ordering, size
                      # taken from the list of strings in include/sensor_msgs/image_encodings.h

uint8 is_bigendian    # is this data bigendian?
uint32 step           # Full row length in bytes
uint8[] data          # actual matrix data, size is (step * rows)

================================================================================
MSG: pal_navigation_msgs/NiceMapTransformation
float64 x 
float64 y
float64 rotYawRad # Yaw rotation in rads
float64 scale

"""
  __slots__ = ['numberOfSubMaps','highways','pods','pois','vo','zoi','ramps','poigroups','visualLocDb','navigation_map','user_map','transform']
  _slot_types = ['int32','pal_navigation_msgs/Highways[]','pal_navigation_msgs/POI','pal_navigation_msgs/POI','pal_navigation_msgs/POI','pal_navigation_msgs/POI','pal_navigation_msgs/POI','pal_navigation_msgs/POIGroup[]','pal_navigation_msgs/VisualLocDB','nav_msgs/OccupancyGrid','sensor_msgs/Image','pal_navigation_msgs/NiceMapTransformation']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       numberOfSubMaps,highways,pods,pois,vo,zoi,ramps,poigroups,visualLocDb,navigation_map,user_map,transform

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MapConfiguration, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.numberOfSubMaps is None:
        self.numberOfSubMaps = 0
      if self.highways is None:
        self.highways = []
      if self.pods is None:
        self.pods = pal_navigation_msgs.msg.POI()
      if self.pois is None:
        self.pois = pal_navigation_msgs.msg.POI()
      if self.vo is None:
        self.vo = pal_navigation_msgs.msg.POI()
      if self.zoi is None:
        self.zoi = pal_navigation_msgs.msg.POI()
      if self.ramps is None:
        self.ramps = pal_navigation_msgs.msg.POI()
      if self.poigroups is None:
        self.poigroups = []
      if self.visualLocDb is None:
        self.visualLocDb = pal_navigation_msgs.msg.VisualLocDB()
      if self.navigation_map is None:
        self.navigation_map = nav_msgs.msg.OccupancyGrid()
      if self.user_map is None:
        self.user_map = sensor_msgs.msg.Image()
      if self.transform is None:
        self.transform = pal_navigation_msgs.msg.NiceMapTransformation()
    else:
      self.numberOfSubMaps = 0
      self.highways = []
      self.pods = pal_navigation_msgs.msg.POI()
      self.pois = pal_navigation_msgs.msg.POI()
      self.vo = pal_navigation_msgs.msg.POI()
      self.zoi = pal_navigation_msgs.msg.POI()
      self.ramps = pal_navigation_msgs.msg.POI()
      self.poigroups = []
      self.visualLocDb = pal_navigation_msgs.msg.VisualLocDB()
      self.navigation_map = nav_msgs.msg.OccupancyGrid()
      self.user_map = sensor_msgs.msg.Image()
      self.transform = pal_navigation_msgs.msg.NiceMapTransformation()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.numberOfSubMaps
      buff.write(_get_struct_i().pack(_x))
      length = len(self.highways)
      buff.write(_struct_I.pack(length))
      for val1 in self.highways:
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v1 = val1.directional
        _x = _v1.data
        buff.write(_get_struct_B().pack(_x))
        _v2 = val1.line_width
        _x = _v2.data
        buff.write(_get_struct_f().pack(_x))
        _v3 = val1.name
        _x = _v3.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.pods.points.header.seq, _x.pods.points.header.stamp.secs, _x.pods.points.header.stamp.nsecs))
      _x = self.pods.points.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.pods.points.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.pods.points.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.pods.points.channels)
      buff.write(_struct_I.pack(length))
      for val1 in self.pods.points.channels:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.values))
      length = len(self.pods.ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.pods.ids:
        _x = val1.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.pods.map_id.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.pois.points.header.seq, _x.pois.points.header.stamp.secs, _x.pois.points.header.stamp.nsecs))
      _x = self.pois.points.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.pois.points.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.pois.points.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.pois.points.channels)
      buff.write(_struct_I.pack(length))
      for val1 in self.pois.points.channels:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.values))
      length = len(self.pois.ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.pois.ids:
        _x = val1.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.pois.map_id.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.vo.points.header.seq, _x.vo.points.header.stamp.secs, _x.vo.points.header.stamp.nsecs))
      _x = self.vo.points.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.vo.points.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.vo.points.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.vo.points.channels)
      buff.write(_struct_I.pack(length))
      for val1 in self.vo.points.channels:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.values))
      length = len(self.vo.ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.vo.ids:
        _x = val1.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.vo.map_id.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.zoi.points.header.seq, _x.zoi.points.header.stamp.secs, _x.zoi.points.header.stamp.nsecs))
      _x = self.zoi.points.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.zoi.points.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.zoi.points.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.zoi.points.channels)
      buff.write(_struct_I.pack(length))
      for val1 in self.zoi.points.channels:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.values))
      length = len(self.zoi.ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.zoi.ids:
        _x = val1.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.zoi.map_id.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.ramps.points.header.seq, _x.ramps.points.header.stamp.secs, _x.ramps.points.header.stamp.nsecs))
      _x = self.ramps.points.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.ramps.points.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.ramps.points.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.ramps.points.channels)
      buff.write(_struct_I.pack(length))
      for val1 in self.ramps.points.channels:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.values))
      length = len(self.ramps.ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.ramps.ids:
        _x = val1.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.ramps.map_id.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.poigroups)
      buff.write(_struct_I.pack(length))
      for val1 in self.poigroups:
        _v4 = val1.group_name
        _x = _v4.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.poi_names)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poi_names:
          _x = val2.data
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.visualLocDb.documents
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.visualLocDb.tree
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.visualLocDb.weights
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.navigation_map.header.seq, _x.navigation_map.header.stamp.secs, _x.navigation_map.header.stamp.nsecs))
      _x = self.navigation_map.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2If2I7d().pack(_x.navigation_map.info.map_load_time.secs, _x.navigation_map.info.map_load_time.nsecs, _x.navigation_map.info.resolution, _x.navigation_map.info.width, _x.navigation_map.info.height, _x.navigation_map.info.origin.position.x, _x.navigation_map.info.origin.position.y, _x.navigation_map.info.origin.position.z, _x.navigation_map.info.origin.orientation.x, _x.navigation_map.info.origin.orientation.y, _x.navigation_map.info.origin.orientation.z, _x.navigation_map.info.origin.orientation.w))
      length = len(self.navigation_map.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.Struct(pattern).pack(*self.navigation_map.data))
      _x = self
      buff.write(_get_struct_3I().pack(_x.user_map.header.seq, _x.user_map.header.stamp.secs, _x.user_map.header.stamp.nsecs))
      _x = self.user_map.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.user_map.height, _x.user_map.width))
      _x = self.user_map.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.user_map.is_bigendian, _x.user_map.step))
      _x = self.user_map.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.transform.x, _x.transform.y, _x.transform.rotYawRad, _x.transform.scale))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.highways is None:
        self.highways = None
      if self.pods is None:
        self.pods = pal_navigation_msgs.msg.POI()
      if self.pois is None:
        self.pois = pal_navigation_msgs.msg.POI()
      if self.vo is None:
        self.vo = pal_navigation_msgs.msg.POI()
      if self.zoi is None:
        self.zoi = pal_navigation_msgs.msg.POI()
      if self.ramps is None:
        self.ramps = pal_navigation_msgs.msg.POI()
      if self.poigroups is None:
        self.poigroups = None
      if self.visualLocDb is None:
        self.visualLocDb = pal_navigation_msgs.msg.VisualLocDB()
      if self.navigation_map is None:
        self.navigation_map = nav_msgs.msg.OccupancyGrid()
      if self.user_map is None:
        self.user_map = sensor_msgs.msg.Image()
      if self.transform is None:
        self.transform = pal_navigation_msgs.msg.NiceMapTransformation()
      end = 0
      start = end
      end += 4
      (self.numberOfSubMaps,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.highways = []
      for i in range(0, length):
        val1 = pal_navigation_msgs.msg.Highways()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.points.append(val2)
        _v5 = val1.directional
        start = end
        end += 1
        (_v5.data,) = _get_struct_B().unpack(str[start:end])
        _v5.data = bool(_v5.data)
        _v6 = val1.line_width
        start = end
        end += 4
        (_v6.data,) = _get_struct_f().unpack(str[start:end])
        _v7 = val1.name
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v7.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v7.data = str[start:end]
        self.highways.append(val1)
      _x = self
      start = end
      end += 12
      (_x.pods.points.header.seq, _x.pods.points.header.stamp.secs, _x.pods.points.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pods.points.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pods.points.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pods.points.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.pods.points.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pods.points.channels = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.ChannelFloat32()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.values = s.unpack(str[start:end])
        self.pods.points.channels.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pods.ids = []
      for i in range(0, length):
        val1 = std_msgs.msg.String()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.data = str[start:end]
        self.pods.ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pods.map_id.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pods.map_id.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.pois.points.header.seq, _x.pois.points.header.stamp.secs, _x.pois.points.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pois.points.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pois.points.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pois.points.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.pois.points.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pois.points.channels = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.ChannelFloat32()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.values = s.unpack(str[start:end])
        self.pois.points.channels.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pois.ids = []
      for i in range(0, length):
        val1 = std_msgs.msg.String()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.data = str[start:end]
        self.pois.ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pois.map_id.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pois.map_id.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.vo.points.header.seq, _x.vo.points.header.stamp.secs, _x.vo.points.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vo.points.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vo.points.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vo.points.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.vo.points.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vo.points.channels = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.ChannelFloat32()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.values = s.unpack(str[start:end])
        self.vo.points.channels.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vo.ids = []
      for i in range(0, length):
        val1 = std_msgs.msg.String()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.data = str[start:end]
        self.vo.ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vo.map_id.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vo.map_id.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.zoi.points.header.seq, _x.zoi.points.header.stamp.secs, _x.zoi.points.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.zoi.points.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.zoi.points.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zoi.points.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.zoi.points.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zoi.points.channels = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.ChannelFloat32()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.values = s.unpack(str[start:end])
        self.zoi.points.channels.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zoi.ids = []
      for i in range(0, length):
        val1 = std_msgs.msg.String()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.data = str[start:end]
        self.zoi.ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.zoi.map_id.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.zoi.map_id.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.ramps.points.header.seq, _x.ramps.points.header.stamp.secs, _x.ramps.points.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ramps.points.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ramps.points.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ramps.points.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.ramps.points.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ramps.points.channels = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.ChannelFloat32()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.values = s.unpack(str[start:end])
        self.ramps.points.channels.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ramps.ids = []
      for i in range(0, length):
        val1 = std_msgs.msg.String()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.data = str[start:end]
        self.ramps.ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ramps.map_id.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ramps.map_id.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.poigroups = []
      for i in range(0, length):
        val1 = pal_navigation_msgs.msg.POIGroup()
        _v8 = val1.group_name
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v8.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v8.data = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poi_names = []
        for i in range(0, length):
          val2 = std_msgs.msg.String()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.data = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.data = str[start:end]
          val1.poi_names.append(val2)
        self.poigroups.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.visualLocDb.documents = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.visualLocDb.tree = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.visualLocDb.weights = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.navigation_map.header.seq, _x.navigation_map.header.stamp.secs, _x.navigation_map.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.navigation_map.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.navigation_map.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 76
      (_x.navigation_map.info.map_load_time.secs, _x.navigation_map.info.map_load_time.nsecs, _x.navigation_map.info.resolution, _x.navigation_map.info.width, _x.navigation_map.info.height, _x.navigation_map.info.origin.position.x, _x.navigation_map.info.origin.position.y, _x.navigation_map.info.origin.position.z, _x.navigation_map.info.origin.orientation.x, _x.navigation_map.info.origin.orientation.y, _x.navigation_map.info.origin.orientation.z, _x.navigation_map.info.origin.orientation.w,) = _get_struct_2If2I7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.navigation_map.data = s.unpack(str[start:end])
      _x = self
      start = end
      end += 12
      (_x.user_map.header.seq, _x.user_map.header.stamp.secs, _x.user_map.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.user_map.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.user_map.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.user_map.height, _x.user_map.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.user_map.encoding = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.user_map.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.user_map.is_bigendian, _x.user_map.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.user_map.data = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.transform.x, _x.transform.y, _x.transform.rotYawRad, _x.transform.scale,) = _get_struct_4d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.numberOfSubMaps
      buff.write(_get_struct_i().pack(_x))
      length = len(self.highways)
      buff.write(_struct_I.pack(length))
      for val1 in self.highways:
        length = len(val1.points)
        buff.write(_struct_I.pack(length))
        for val2 in val1.points:
          _x = val2
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v9 = val1.directional
        _x = _v9.data
        buff.write(_get_struct_B().pack(_x))
        _v10 = val1.line_width
        _x = _v10.data
        buff.write(_get_struct_f().pack(_x))
        _v11 = val1.name
        _x = _v11.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.pods.points.header.seq, _x.pods.points.header.stamp.secs, _x.pods.points.header.stamp.nsecs))
      _x = self.pods.points.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.pods.points.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.pods.points.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.pods.points.channels)
      buff.write(_struct_I.pack(length))
      for val1 in self.pods.points.channels:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.values.tostring())
      length = len(self.pods.ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.pods.ids:
        _x = val1.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.pods.map_id.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.pois.points.header.seq, _x.pois.points.header.stamp.secs, _x.pois.points.header.stamp.nsecs))
      _x = self.pois.points.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.pois.points.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.pois.points.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.pois.points.channels)
      buff.write(_struct_I.pack(length))
      for val1 in self.pois.points.channels:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.values.tostring())
      length = len(self.pois.ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.pois.ids:
        _x = val1.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.pois.map_id.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.vo.points.header.seq, _x.vo.points.header.stamp.secs, _x.vo.points.header.stamp.nsecs))
      _x = self.vo.points.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.vo.points.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.vo.points.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.vo.points.channels)
      buff.write(_struct_I.pack(length))
      for val1 in self.vo.points.channels:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.values.tostring())
      length = len(self.vo.ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.vo.ids:
        _x = val1.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.vo.map_id.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.zoi.points.header.seq, _x.zoi.points.header.stamp.secs, _x.zoi.points.header.stamp.nsecs))
      _x = self.zoi.points.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.zoi.points.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.zoi.points.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.zoi.points.channels)
      buff.write(_struct_I.pack(length))
      for val1 in self.zoi.points.channels:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.values.tostring())
      length = len(self.zoi.ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.zoi.ids:
        _x = val1.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.zoi.map_id.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.ramps.points.header.seq, _x.ramps.points.header.stamp.secs, _x.ramps.points.header.stamp.nsecs))
      _x = self.ramps.points.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.ramps.points.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.ramps.points.points:
        _x = val1
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
      length = len(self.ramps.points.channels)
      buff.write(_struct_I.pack(length))
      for val1 in self.ramps.points.channels:
        _x = val1.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.values)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.values.tostring())
      length = len(self.ramps.ids)
      buff.write(_struct_I.pack(length))
      for val1 in self.ramps.ids:
        _x = val1.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.ramps.map_id.data
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.poigroups)
      buff.write(_struct_I.pack(length))
      for val1 in self.poigroups:
        _v12 = val1.group_name
        _x = _v12.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(val1.poi_names)
        buff.write(_struct_I.pack(length))
        for val2 in val1.poi_names:
          _x = val2.data
          length = len(_x)
          if python3 or type(_x) == unicode:
            _x = _x.encode('utf-8')
            length = len(_x)
          buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.visualLocDb.documents
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.visualLocDb.tree
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.visualLocDb.weights
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_3I().pack(_x.navigation_map.header.seq, _x.navigation_map.header.stamp.secs, _x.navigation_map.header.stamp.nsecs))
      _x = self.navigation_map.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2If2I7d().pack(_x.navigation_map.info.map_load_time.secs, _x.navigation_map.info.map_load_time.nsecs, _x.navigation_map.info.resolution, _x.navigation_map.info.width, _x.navigation_map.info.height, _x.navigation_map.info.origin.position.x, _x.navigation_map.info.origin.position.y, _x.navigation_map.info.origin.position.z, _x.navigation_map.info.origin.orientation.x, _x.navigation_map.info.origin.orientation.y, _x.navigation_map.info.origin.orientation.z, _x.navigation_map.info.origin.orientation.w))
      length = len(self.navigation_map.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.navigation_map.data.tostring())
      _x = self
      buff.write(_get_struct_3I().pack(_x.user_map.header.seq, _x.user_map.header.stamp.secs, _x.user_map.header.stamp.nsecs))
      _x = self.user_map.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.user_map.height, _x.user_map.width))
      _x = self.user_map.encoding
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_BI().pack(_x.user_map.is_bigendian, _x.user_map.step))
      _x = self.user_map.data
      length = len(_x)
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(struct.Struct('<I%sB'%length).pack(length, *_x))
      else:
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_4d().pack(_x.transform.x, _x.transform.y, _x.transform.rotYawRad, _x.transform.scale))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.highways is None:
        self.highways = None
      if self.pods is None:
        self.pods = pal_navigation_msgs.msg.POI()
      if self.pois is None:
        self.pois = pal_navigation_msgs.msg.POI()
      if self.vo is None:
        self.vo = pal_navigation_msgs.msg.POI()
      if self.zoi is None:
        self.zoi = pal_navigation_msgs.msg.POI()
      if self.ramps is None:
        self.ramps = pal_navigation_msgs.msg.POI()
      if self.poigroups is None:
        self.poigroups = None
      if self.visualLocDb is None:
        self.visualLocDb = pal_navigation_msgs.msg.VisualLocDB()
      if self.navigation_map is None:
        self.navigation_map = nav_msgs.msg.OccupancyGrid()
      if self.user_map is None:
        self.user_map = sensor_msgs.msg.Image()
      if self.transform is None:
        self.transform = pal_navigation_msgs.msg.NiceMapTransformation()
      end = 0
      start = end
      end += 4
      (self.numberOfSubMaps,) = _get_struct_i().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.highways = []
      for i in range(0, length):
        val1 = pal_navigation_msgs.msg.Highways()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.points = []
        for i in range(0, length):
          val2 = geometry_msgs.msg.Point()
          _x = val2
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          val1.points.append(val2)
        _v13 = val1.directional
        start = end
        end += 1
        (_v13.data,) = _get_struct_B().unpack(str[start:end])
        _v13.data = bool(_v13.data)
        _v14 = val1.line_width
        start = end
        end += 4
        (_v14.data,) = _get_struct_f().unpack(str[start:end])
        _v15 = val1.name
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v15.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v15.data = str[start:end]
        self.highways.append(val1)
      _x = self
      start = end
      end += 12
      (_x.pods.points.header.seq, _x.pods.points.header.stamp.secs, _x.pods.points.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pods.points.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pods.points.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pods.points.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.pods.points.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pods.points.channels = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.ChannelFloat32()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.values = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.pods.points.channels.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pods.ids = []
      for i in range(0, length):
        val1 = std_msgs.msg.String()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.data = str[start:end]
        self.pods.ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pods.map_id.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pods.map_id.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.pois.points.header.seq, _x.pois.points.header.stamp.secs, _x.pois.points.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pois.points.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pois.points.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pois.points.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.pois.points.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pois.points.channels = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.ChannelFloat32()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.values = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.pois.points.channels.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.pois.ids = []
      for i in range(0, length):
        val1 = std_msgs.msg.String()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.data = str[start:end]
        self.pois.ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.pois.map_id.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.pois.map_id.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.vo.points.header.seq, _x.vo.points.header.stamp.secs, _x.vo.points.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vo.points.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vo.points.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vo.points.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.vo.points.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vo.points.channels = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.ChannelFloat32()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.values = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.vo.points.channels.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.vo.ids = []
      for i in range(0, length):
        val1 = std_msgs.msg.String()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.data = str[start:end]
        self.vo.ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.vo.map_id.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.vo.map_id.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.zoi.points.header.seq, _x.zoi.points.header.stamp.secs, _x.zoi.points.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.zoi.points.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.zoi.points.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zoi.points.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.zoi.points.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zoi.points.channels = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.ChannelFloat32()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.values = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.zoi.points.channels.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.zoi.ids = []
      for i in range(0, length):
        val1 = std_msgs.msg.String()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.data = str[start:end]
        self.zoi.ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.zoi.map_id.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.zoi.map_id.data = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.ramps.points.header.seq, _x.ramps.points.header.stamp.secs, _x.ramps.points.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ramps.points.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ramps.points.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ramps.points.points = []
      for i in range(0, length):
        val1 = geometry_msgs.msg.Point32()
        _x = val1
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        self.ramps.points.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ramps.points.channels = []
      for i in range(0, length):
        val1 = sensor_msgs.msg.ChannelFloat32()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.name = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.values = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        self.ramps.points.channels.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.ramps.ids = []
      for i in range(0, length):
        val1 = std_msgs.msg.String()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.data = str[start:end]
        self.ramps.ids.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.ramps.map_id.data = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.ramps.map_id.data = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.poigroups = []
      for i in range(0, length):
        val1 = pal_navigation_msgs.msg.POIGroup()
        _v16 = val1.group_name
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v16.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v16.data = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.poi_names = []
        for i in range(0, length):
          val2 = std_msgs.msg.String()
          start = end
          end += 4
          (length,) = _struct_I.unpack(str[start:end])
          start = end
          end += length
          if python3:
            val2.data = str[start:end].decode('utf-8', 'rosmsg')
          else:
            val2.data = str[start:end]
          val1.poi_names.append(val2)
        self.poigroups.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.visualLocDb.documents = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.visualLocDb.tree = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.visualLocDb.weights = str[start:end]
      _x = self
      start = end
      end += 12
      (_x.navigation_map.header.seq, _x.navigation_map.header.stamp.secs, _x.navigation_map.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.navigation_map.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.navigation_map.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 76
      (_x.navigation_map.info.map_load_time.secs, _x.navigation_map.info.map_load_time.nsecs, _x.navigation_map.info.resolution, _x.navigation_map.info.width, _x.navigation_map.info.height, _x.navigation_map.info.origin.position.x, _x.navigation_map.info.origin.position.y, _x.navigation_map.info.origin.position.z, _x.navigation_map.info.origin.orientation.x, _x.navigation_map.info.origin.orientation.y, _x.navigation_map.info.origin.orientation.z, _x.navigation_map.info.origin.orientation.w,) = _get_struct_2If2I7d().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.navigation_map.data = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      _x = self
      start = end
      end += 12
      (_x.user_map.header.seq, _x.user_map.header.stamp.secs, _x.user_map.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.user_map.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.user_map.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.user_map.height, _x.user_map.width,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.user_map.encoding = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.user_map.encoding = str[start:end]
      _x = self
      start = end
      end += 5
      (_x.user_map.is_bigendian, _x.user_map.step,) = _get_struct_BI().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.user_map.data = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.transform.x, _x.transform.y, _x.transform.rotYawRad, _x.transform.scale,) = _get_struct_4d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2If2I7d = None
def _get_struct_2If2I7d():
    global _struct_2If2I7d
    if _struct_2If2I7d is None:
        _struct_2If2I7d = struct.Struct("<2If2I7d")
    return _struct_2If2I7d
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_BI = None
def _get_struct_BI():
    global _struct_BI
    if _struct_BI is None:
        _struct_BI = struct.Struct("<BI")
    return _struct_BI
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
_struct_i = None
def _get_struct_i():
    global _struct_i
    if _struct_i is None:
        _struct_i = struct.Struct("<i")
    return _struct_i
