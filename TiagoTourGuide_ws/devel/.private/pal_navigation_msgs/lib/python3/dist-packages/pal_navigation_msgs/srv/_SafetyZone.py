# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pal_navigation_msgs/SafetyZoneRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SafetyZoneRequest(genpy.Message):
  _md5sum = "269cbb74525b0bd07e71e2ec943affd4"
  _type = "pal_navigation_msgs/SafetyZoneRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """#Binary sensor mask o select sensors used to check safety_zone
byte NO_SENSORS = 0
byte ALL_SENSORS = 127 
#sonar sensors
byte FRONT_SONARS = 1
byte LEFT_SONARS = 2
byte RIGHT_SONARS = 4
byte BACK_SONARS = 8
byte TORSO_SONARS = 16
byte ONLY_SONARS = 31
#lasers
byte BASE_LASER = 32
byte TORSO_LASER = 64
byte ONLY_LASERS = 96

# Request Safety Zone

# Distance to take into account for obstacle detection
float64 distance

# Angles that specify the zone to check for safety
float64 leftAngleRad
float64 rightAngleRad

uint32 sensorMask

"""
  # Pseudo-constants
  NO_SENSORS = 0
  ALL_SENSORS = 127
  FRONT_SONARS = 1
  LEFT_SONARS = 2
  RIGHT_SONARS = 4
  BACK_SONARS = 8
  TORSO_SONARS = 16
  ONLY_SONARS = 31
  BASE_LASER = 32
  TORSO_LASER = 64
  ONLY_LASERS = 96

  __slots__ = ['distance','leftAngleRad','rightAngleRad','sensorMask']
  _slot_types = ['float64','float64','float64','uint32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       distance,leftAngleRad,rightAngleRad,sensorMask

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SafetyZoneRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.distance is None:
        self.distance = 0.
      if self.leftAngleRad is None:
        self.leftAngleRad = 0.
      if self.rightAngleRad is None:
        self.rightAngleRad = 0.
      if self.sensorMask is None:
        self.sensorMask = 0
    else:
      self.distance = 0.
      self.leftAngleRad = 0.
      self.rightAngleRad = 0.
      self.sensorMask = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3dI().pack(_x.distance, _x.leftAngleRad, _x.rightAngleRad, _x.sensorMask))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.distance, _x.leftAngleRad, _x.rightAngleRad, _x.sensorMask,) = _get_struct_3dI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3dI().pack(_x.distance, _x.leftAngleRad, _x.rightAngleRad, _x.sensorMask))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 28
      (_x.distance, _x.leftAngleRad, _x.rightAngleRad, _x.sensorMask,) = _get_struct_3dI().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3dI = None
def _get_struct_3dI():
    global _struct_3dI
    if _struct_3dI is None:
        _struct_3dI = struct.Struct("<3dI")
    return _struct_3dI
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pal_navigation_msgs/SafetyZoneResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class SafetyZoneResponse(genpy.Message):
  _md5sum = "e2ae1feeb09d43547ad602b6e1dca6d7"
  _type = "pal_navigation_msgs/SafetyZoneResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """
#True if the specified side is safe, false otherwise. 
#It returns the min distance and at which angle has been measured for each side.

bool leftSafe
float64 leftMinDist
float64 leftMinDistAngleRad

bool rightSafe 
float64 rightMinDist
float64 rightMinDistAngleRad

"""
  __slots__ = ['leftSafe','leftMinDist','leftMinDistAngleRad','rightSafe','rightMinDist','rightMinDistAngleRad']
  _slot_types = ['bool','float64','float64','bool','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       leftSafe,leftMinDist,leftMinDistAngleRad,rightSafe,rightMinDist,rightMinDistAngleRad

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(SafetyZoneResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.leftSafe is None:
        self.leftSafe = False
      if self.leftMinDist is None:
        self.leftMinDist = 0.
      if self.leftMinDistAngleRad is None:
        self.leftMinDistAngleRad = 0.
      if self.rightSafe is None:
        self.rightSafe = False
      if self.rightMinDist is None:
        self.rightMinDist = 0.
      if self.rightMinDistAngleRad is None:
        self.rightMinDistAngleRad = 0.
    else:
      self.leftSafe = False
      self.leftMinDist = 0.
      self.leftMinDistAngleRad = 0.
      self.rightSafe = False
      self.rightMinDist = 0.
      self.rightMinDistAngleRad = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_B2dB2d().pack(_x.leftSafe, _x.leftMinDist, _x.leftMinDistAngleRad, _x.rightSafe, _x.rightMinDist, _x.rightMinDistAngleRad))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 34
      (_x.leftSafe, _x.leftMinDist, _x.leftMinDistAngleRad, _x.rightSafe, _x.rightMinDist, _x.rightMinDistAngleRad,) = _get_struct_B2dB2d().unpack(str[start:end])
      self.leftSafe = bool(self.leftSafe)
      self.rightSafe = bool(self.rightSafe)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_B2dB2d().pack(_x.leftSafe, _x.leftMinDist, _x.leftMinDistAngleRad, _x.rightSafe, _x.rightMinDist, _x.rightMinDistAngleRad))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 34
      (_x.leftSafe, _x.leftMinDist, _x.leftMinDistAngleRad, _x.rightSafe, _x.rightMinDist, _x.rightMinDistAngleRad,) = _get_struct_B2dB2d().unpack(str[start:end])
      self.leftSafe = bool(self.leftSafe)
      self.rightSafe = bool(self.rightSafe)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B2dB2d = None
def _get_struct_B2dB2d():
    global _struct_B2dB2d
    if _struct_B2dB2d is None:
        _struct_B2dB2d = struct.Struct("<B2dB2d")
    return _struct_B2dB2d
class SafetyZone(object):
  _type          = 'pal_navigation_msgs/SafetyZone'
  _md5sum = '19f798f566629d71a0a37495aba033fe'
  _request_class  = SafetyZoneRequest
  _response_class = SafetyZoneResponse
