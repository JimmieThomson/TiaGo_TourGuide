# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pal_navigation_msgs/VisualLocRecognizeRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class VisualLocRecognizeRequest(genpy.Message):
  _md5sum = "d41d8cd98f00b204e9800998ecf8427e"
  _type = "pal_navigation_msgs/VisualLocRecognizeRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# not argument needed to call place recognition 
"""
  __slots__ = []
  _slot_types = []

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VisualLocRecognizeRequest, self).__init__(*args, **kwds)

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      pass
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pal_navigation_msgs/VisualLocRecognizeResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class VisualLocRecognizeResponse(genpy.Message):
  _md5sum = "af944bb003989194ffe33120c472f3ed"
  _type = "pal_navigation_msgs/VisualLocRecognizeResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool success                                               # return true if get successful recognition
float64 confidence                                          # recognition confidence
geometry_msgs/PoseWithCovarianceStamped estimatedPose      # estimated pose (use this only when success == true)





================================================================================
MSG: geometry_msgs/PoseWithCovarianceStamped
# This expresses an estimated pose with a reference coordinate frame and timestamp

Header header
PoseWithCovariance pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/PoseWithCovariance
# This represents a pose in free space with uncertainty.

Pose pose

# Row-major representation of the 6x6 covariance matrix
# The orientation parameters use a fixed-axis representation.
# In order, the parameters are:
# (x, y, z, rotation about X axis, rotation about Y axis, rotation about Z axis)
float64[36] covariance

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w
"""
  __slots__ = ['success','confidence','estimatedPose']
  _slot_types = ['bool','float64','geometry_msgs/PoseWithCovarianceStamped']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       success,confidence,estimatedPose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(VisualLocRecognizeResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.success is None:
        self.success = False
      if self.confidence is None:
        self.confidence = 0.
      if self.estimatedPose is None:
        self.estimatedPose = geometry_msgs.msg.PoseWithCovarianceStamped()
    else:
      self.success = False
      self.confidence = 0.
      self.estimatedPose = geometry_msgs.msg.PoseWithCovarianceStamped()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_Bd3I().pack(_x.success, _x.confidence, _x.estimatedPose.header.seq, _x.estimatedPose.header.stamp.secs, _x.estimatedPose.header.stamp.nsecs))
      _x = self.estimatedPose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.estimatedPose.pose.pose.position.x, _x.estimatedPose.pose.pose.position.y, _x.estimatedPose.pose.pose.position.z, _x.estimatedPose.pose.pose.orientation.x, _x.estimatedPose.pose.pose.orientation.y, _x.estimatedPose.pose.pose.orientation.z, _x.estimatedPose.pose.pose.orientation.w))
      buff.write(_get_struct_36d().pack(*self.estimatedPose.pose.covariance))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.estimatedPose is None:
        self.estimatedPose = geometry_msgs.msg.PoseWithCovarianceStamped()
      end = 0
      _x = self
      start = end
      end += 21
      (_x.success, _x.confidence, _x.estimatedPose.header.seq, _x.estimatedPose.header.stamp.secs, _x.estimatedPose.header.stamp.nsecs,) = _get_struct_Bd3I().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.estimatedPose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.estimatedPose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.estimatedPose.pose.pose.position.x, _x.estimatedPose.pose.pose.position.y, _x.estimatedPose.pose.pose.position.z, _x.estimatedPose.pose.pose.orientation.x, _x.estimatedPose.pose.pose.orientation.y, _x.estimatedPose.pose.pose.orientation.z, _x.estimatedPose.pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.estimatedPose.pose.covariance = _get_struct_36d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_Bd3I().pack(_x.success, _x.confidence, _x.estimatedPose.header.seq, _x.estimatedPose.header.stamp.secs, _x.estimatedPose.header.stamp.nsecs))
      _x = self.estimatedPose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.estimatedPose.pose.pose.position.x, _x.estimatedPose.pose.pose.position.y, _x.estimatedPose.pose.pose.position.z, _x.estimatedPose.pose.pose.orientation.x, _x.estimatedPose.pose.pose.orientation.y, _x.estimatedPose.pose.pose.orientation.z, _x.estimatedPose.pose.pose.orientation.w))
      buff.write(self.estimatedPose.pose.covariance.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.estimatedPose is None:
        self.estimatedPose = geometry_msgs.msg.PoseWithCovarianceStamped()
      end = 0
      _x = self
      start = end
      end += 21
      (_x.success, _x.confidence, _x.estimatedPose.header.seq, _x.estimatedPose.header.stamp.secs, _x.estimatedPose.header.stamp.nsecs,) = _get_struct_Bd3I().unpack(str[start:end])
      self.success = bool(self.success)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.estimatedPose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.estimatedPose.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.estimatedPose.pose.pose.position.x, _x.estimatedPose.pose.pose.position.y, _x.estimatedPose.pose.pose.position.z, _x.estimatedPose.pose.pose.orientation.x, _x.estimatedPose.pose.pose.orientation.y, _x.estimatedPose.pose.pose.orientation.z, _x.estimatedPose.pose.pose.orientation.w,) = _get_struct_7d().unpack(str[start:end])
      start = end
      end += 288
      self.estimatedPose.pose.covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=36)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_36d = None
def _get_struct_36d():
    global _struct_36d
    if _struct_36d is None:
        _struct_36d = struct.Struct("<36d")
    return _struct_36d
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_Bd3I = None
def _get_struct_Bd3I():
    global _struct_Bd3I
    if _struct_Bd3I is None:
        _struct_Bd3I = struct.Struct("<Bd3I")
    return _struct_Bd3I
class VisualLocRecognize(object):
  _type          = 'pal_navigation_msgs/VisualLocRecognize'
  _md5sum = 'af944bb003989194ffe33120c472f3ed'
  _request_class  = VisualLocRecognizeRequest
  _response_class = VisualLocRecognizeResponse
