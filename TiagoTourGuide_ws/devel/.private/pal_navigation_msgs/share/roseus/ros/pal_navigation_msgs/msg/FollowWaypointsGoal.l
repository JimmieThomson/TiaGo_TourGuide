;; Auto-generated. Do not edit!


(when (boundp 'pal_navigation_msgs::FollowWaypointsGoal)
  (if (not (find-package "PAL_NAVIGATION_MSGS"))
    (make-package "PAL_NAVIGATION_MSGS"))
  (shadow 'FollowWaypointsGoal (find-package "PAL_NAVIGATION_MSGS")))
(unless (find-package "PAL_NAVIGATION_MSGS::FOLLOWWAYPOINTSGOAL")
  (make-package "PAL_NAVIGATION_MSGS::FOLLOWWAYPOINTSGOAL"))

(in-package "ROS")
;;//! \htmlinclude FollowWaypointsGoal.msg.html


(intern "*NONE*" (find-package "PAL_NAVIGATION_MSGS::FOLLOWWAYPOINTSGOAL"))
(shadow '*NONE* (find-package "PAL_NAVIGATION_MSGS::FOLLOWWAYPOINTSGOAL"))
(defconstant pal_navigation_msgs::FollowWaypointsGoal::*NONE* 0)
(intern "*UNKNOWN*" (find-package "PAL_NAVIGATION_MSGS::FOLLOWWAYPOINTSGOAL"))
(shadow '*UNKNOWN* (find-package "PAL_NAVIGATION_MSGS::FOLLOWWAYPOINTSGOAL"))
(defconstant pal_navigation_msgs::FollowWaypointsGoal::*UNKNOWN* 600)
(intern "*TASK_EXECUTOR_FAILED*" (find-package "PAL_NAVIGATION_MSGS::FOLLOWWAYPOINTSGOAL"))
(shadow '*TASK_EXECUTOR_FAILED* (find-package "PAL_NAVIGATION_MSGS::FOLLOWWAYPOINTSGOAL"))
(defconstant pal_navigation_msgs::FollowWaypointsGoal::*TASK_EXECUTOR_FAILED* 601)

(defun pal_navigation_msgs::FollowWaypointsGoal-to-symbol (const)
  (cond
        ((= const 0) 'pal_navigation_msgs::FollowWaypointsGoal::*NONE*)
        ((= const 600) 'pal_navigation_msgs::FollowWaypointsGoal::*UNKNOWN*)
        ((= const 601) 'pal_navigation_msgs::FollowWaypointsGoal::*TASK_EXECUTOR_FAILED*)
        (t nil)))

(defclass pal_navigation_msgs::FollowWaypointsGoal
  :super ros::object
  :slots (_goal_index _number_of_loops _bt_model_name _poses ))

(defmethod pal_navigation_msgs::FollowWaypointsGoal
  (:init
   (&key
    ((:goal_index __goal_index) 0)
    ((:number_of_loops __number_of_loops) 0)
    ((:bt_model_name __bt_model_name) "")
    ((:poses __poses) ())
    )
   (send-super :init)
   (setq _goal_index (round __goal_index))
   (setq _number_of_loops (round __number_of_loops))
   (setq _bt_model_name (string __bt_model_name))
   (setq _poses __poses)
   self)
  (:goal_index
   (&optional __goal_index)
   (if __goal_index (setq _goal_index __goal_index)) _goal_index)
  (:number_of_loops
   (&optional __number_of_loops)
   (if __number_of_loops (setq _number_of_loops __number_of_loops)) _number_of_loops)
  (:bt_model_name
   (&optional __bt_model_name)
   (if __bt_model_name (setq _bt_model_name __bt_model_name)) _bt_model_name)
  (:poses
   (&rest __poses)
   (if (keywordp (car __poses))
       (send* _poses __poses)
     (progn
       (if __poses (setq _poses (car __poses)))
       _poses)))
  (:serialization-length
   ()
   (+
    ;; uint32 _goal_index
    4
    ;; uint32 _number_of_loops
    4
    ;; string _bt_model_name
    4 (length _bt_model_name)
    ;; pal_navigation_msgs/Waypoint[] _poses
    (apply #'+ (send-all _poses :serialization-length)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; uint32 _goal_index
       (write-long _goal_index s)
     ;; uint32 _number_of_loops
       (write-long _number_of_loops s)
     ;; string _bt_model_name
       (write-long (length _bt_model_name) s) (princ _bt_model_name s)
     ;; pal_navigation_msgs/Waypoint[] _poses
     (write-long (length _poses) s)
     (dolist (elem _poses)
       (send elem :serialize s)
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; uint32 _goal_index
     (setq _goal_index (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;; uint32 _number_of_loops
     (setq _number_of_loops (sys::peek buf ptr- :integer)) (incf ptr- 4)
   ;; string _bt_model_name
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setq _bt_model_name (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
   ;; pal_navigation_msgs/Waypoint[] _poses
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _poses (let (r) (dotimes (i n) (push (instance pal_navigation_msgs::Waypoint :init) r)) r))
     (dolist (elem- _poses)
     (send elem- :deserialize buf ptr-) (incf ptr- (send elem- :serialization-length))
     ))
   ;;
   self)
  )

(setf (get pal_navigation_msgs::FollowWaypointsGoal :md5sum-) "6ac0bba57c7ff0865644730bc6d43f52")
(setf (get pal_navigation_msgs::FollowWaypointsGoal :datatype-) "pal_navigation_msgs/FollowWaypointsGoal")
(setf (get pal_navigation_msgs::FollowWaypointsGoal :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# Error codes
# Note: The expected priority order of the errors should match the message order
uint32 NONE=0
uint32 UNKNOWN=600
uint32 TASK_EXECUTOR_FAILED=601

#goal definition
uint32 goal_index
uint32 number_of_loops
string bt_model_name
pal_navigation_msgs/Waypoint[] poses

================================================================================
MSG: pal_navigation_msgs/Waypoint
# Error codes
# Note: The expected priority order of the errors should match the message order
uint32 NOTHING=0
uint32 WAIT=1
uint32 ROTATE=2
uint32 DOCK=3
uint32 UNDOCK=4

uint32[] actions
geometry_msgs/PoseStamped pose
================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

")



(provide :pal_navigation_msgs/FollowWaypointsGoal "6ac0bba57c7ff0865644730bc6d43f52")


