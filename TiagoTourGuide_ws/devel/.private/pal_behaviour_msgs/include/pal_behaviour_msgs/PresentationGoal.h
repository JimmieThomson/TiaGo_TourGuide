// Generated by gencpp from file pal_behaviour_msgs/PresentationGoal.msg
// DO NOT EDIT!


#ifndef PAL_BEHAVIOUR_MSGS_MESSAGE_PRESENTATIONGOAL_H
#define PAL_BEHAVIOUR_MSGS_MESSAGE_PRESENTATIONGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pal_behaviour_msgs
{
template <class ContainerAllocator>
struct PresentationGoal_
{
  typedef PresentationGoal_<ContainerAllocator> Type;

  PresentationGoal_()
    : presentationFile()  {
    }
  PresentationGoal_(const ContainerAllocator& _alloc)
    : presentationFile(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _presentationFile_type;
  _presentationFile_type presentationFile;





  typedef boost::shared_ptr< ::pal_behaviour_msgs::PresentationGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pal_behaviour_msgs::PresentationGoal_<ContainerAllocator> const> ConstPtr;

}; // struct PresentationGoal_

typedef ::pal_behaviour_msgs::PresentationGoal_<std::allocator<void> > PresentationGoal;

typedef boost::shared_ptr< ::pal_behaviour_msgs::PresentationGoal > PresentationGoalPtr;
typedef boost::shared_ptr< ::pal_behaviour_msgs::PresentationGoal const> PresentationGoalConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pal_behaviour_msgs::PresentationGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pal_behaviour_msgs::PresentationGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pal_behaviour_msgs::PresentationGoal_<ContainerAllocator1> & lhs, const ::pal_behaviour_msgs::PresentationGoal_<ContainerAllocator2> & rhs)
{
  return lhs.presentationFile == rhs.presentationFile;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pal_behaviour_msgs::PresentationGoal_<ContainerAllocator1> & lhs, const ::pal_behaviour_msgs::PresentationGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pal_behaviour_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pal_behaviour_msgs::PresentationGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pal_behaviour_msgs::PresentationGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_behaviour_msgs::PresentationGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_behaviour_msgs::PresentationGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_behaviour_msgs::PresentationGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_behaviour_msgs::PresentationGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pal_behaviour_msgs::PresentationGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2fabda36f289edf937fcb83c63997aa0";
  }

  static const char* value(const ::pal_behaviour_msgs::PresentationGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2fabda36f289edf9ULL;
  static const uint64_t static_value2 = 0x37fcb83c63997aa0ULL;
};

template<class ContainerAllocator>
struct DataType< ::pal_behaviour_msgs::PresentationGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pal_behaviour_msgs/PresentationGoal";
  }

  static const char* value(const ::pal_behaviour_msgs::PresentationGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pal_behaviour_msgs::PresentationGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"string presentationFile\n"
;
  }

  static const char* value(const ::pal_behaviour_msgs::PresentationGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pal_behaviour_msgs::PresentationGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.presentationFile);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct PresentationGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pal_behaviour_msgs::PresentationGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pal_behaviour_msgs::PresentationGoal_<ContainerAllocator>& v)
  {
    s << indent << "presentationFile: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.presentationFile);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PAL_BEHAVIOUR_MSGS_MESSAGE_PRESENTATIONGOAL_H
