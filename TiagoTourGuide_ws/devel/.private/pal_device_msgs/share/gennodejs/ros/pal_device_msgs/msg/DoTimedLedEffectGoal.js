// Auto-generated. Do not edit!

// (in-package pal_device_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;
let LedEffectParams = require('./LedEffectParams.js');

//-----------------------------------------------------------

class DoTimedLedEffectGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.devices = null;
      this.params = null;
      this.effectDuration = null;
      this.priority = null;
    }
    else {
      if (initObj.hasOwnProperty('devices')) {
        this.devices = initObj.devices
      }
      else {
        this.devices = [];
      }
      if (initObj.hasOwnProperty('params')) {
        this.params = initObj.params
      }
      else {
        this.params = new LedEffectParams();
      }
      if (initObj.hasOwnProperty('effectDuration')) {
        this.effectDuration = initObj.effectDuration
      }
      else {
        this.effectDuration = {secs: 0, nsecs: 0};
      }
      if (initObj.hasOwnProperty('priority')) {
        this.priority = initObj.priority
      }
      else {
        this.priority = 0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type DoTimedLedEffectGoal
    // Serialize message field [devices]
    bufferOffset = _arraySerializer.uint32(obj.devices, buffer, bufferOffset, null);
    // Serialize message field [params]
    bufferOffset = LedEffectParams.serialize(obj.params, buffer, bufferOffset);
    // Serialize message field [effectDuration]
    bufferOffset = _serializer.duration(obj.effectDuration, buffer, bufferOffset);
    // Serialize message field [priority]
    bufferOffset = _serializer.uint8(obj.priority, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type DoTimedLedEffectGoal
    let len;
    let data = new DoTimedLedEffectGoal(null);
    // Deserialize message field [devices]
    data.devices = _arrayDeserializer.uint32(buffer, bufferOffset, null)
    // Deserialize message field [params]
    data.params = LedEffectParams.deserialize(buffer, bufferOffset);
    // Deserialize message field [effectDuration]
    data.effectDuration = _deserializer.duration(buffer, bufferOffset);
    // Deserialize message field [priority]
    data.priority = _deserializer.uint8(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += 4 * object.devices.length;
    length += LedEffectParams.getMessageSize(object.params);
    return length + 13;
  }

  static datatype() {
    // Returns string type for a message object
    return 'pal_device_msgs/DoTimedLedEffectGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'e94eafb34df9ab3216d4d9fc90569af3';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    #uint16 because uint8 is char[] in Python
    uint32[] devices
    
    #Contains parameters for all led effects, but only the selected effect type parameters shall be provided
    LedEffectParams params
    #Duration of the effect, when the time is over the previous effect will be restored. 0 will make it display forever
    duration effectDuration
    
    #priority of the effect, 0 is no priority, 255 is max priority
    uint8 priority
    
    ================================================================================
    MSG: pal_device_msgs/LedEffectParams
    uint8 FIXED_COLOR=0
    uint8 RAINBOW=1
    uint8 FADE=2
    uint8 BLINK=3
    uint8 PROGRESS=4
    uint8 FLOW=5
    uint8 PREPROGRAMMED_EFFECT=6
    uint8 EFFECT_VIA_TOPIC=7
    uint8 DATA_ARRAY=8
    
    uint8 effectType
    
    # RGBA of color, alpha will be used as intensity if supported by the led
    pal_device_msgs/LedFixedColorParams fixed_color
    pal_device_msgs/LedRainbowParams rainbow
    pal_device_msgs/LedFadeParams fade
    pal_device_msgs/LedBlinkParams blink
    pal_device_msgs/LedProgressParams progress
    pal_device_msgs/LedFlowParams flow
    #Below are device specific, avoid them if you can
    pal_device_msgs/LedPreProgrammedParams preprogrammed
    pal_device_msgs/LedEffectViaTopicParams effect_via_topic
    pal_device_msgs/LedDataArrayParams data_array
    
    ================================================================================
    MSG: pal_device_msgs/LedFixedColorParams
    # RGBA of color, alpha will be used as intensity if supported by the led
    std_msgs/ColorRGBA color
    
    ================================================================================
    MSG: std_msgs/ColorRGBA
    float32 r
    float32 g
    float32 b
    float32 a
    
    ================================================================================
    MSG: pal_device_msgs/LedRainbowParams
    # Time to perform rainbow
    duration transition_duration
    
    ================================================================================
    MSG: pal_device_msgs/LedFadeParams
    # RGBA of color, alpha will be used as intensity if supported by the led
    std_msgs/ColorRGBA first_color
    std_msgs/ColorRGBA second_color
    
    #Duration of the transition from one color to the other
    duration transition_duration
    
    #Perform a fade when going from secondColor to firstColor
    bool reverse_fade
    
    
    ================================================================================
    MSG: pal_device_msgs/LedBlinkParams
    # RGBA of color, alpha will be used as intensity if supported by the led
    std_msgs/ColorRGBA first_color
    std_msgs/ColorRGBA second_color
    
    duration first_color_duration
    duration second_color_duration
    
    
    ================================================================================
    MSG: pal_device_msgs/LedProgressParams
    # RGBA of color, alpha will be used as intensity if supported by the led
    std_msgs/ColorRGBA first_color
    std_msgs/ColorRGBA second_color
    
    #Percentage of pixels painted with the first color
    float32 percentage
    #Offset to begin painting the first color
    float32 led_offset 
    
    
    ================================================================================
    MSG: pal_device_msgs/LedFlowParams
    # RGBA of color, alpha will be used as intensity if supported by the led
    std_msgs/ColorRGBA first_color
    std_msgs/ColorRGBA second_color
    
    # Percentage of pixels painted with the first color
    float32 percentage
    # Flow velocity
    float32 velocity
    
    
    ================================================================================
    MSG: pal_device_msgs/LedPreProgrammedParams
    #Id of pre-programmed effect, most likely device specific
    uint8 preprogrammed_id
    
    ================================================================================
    MSG: pal_device_msgs/LedEffectViaTopicParams
    #Topic name, must be of type pal_device_msgs/LedDataArray
    string topic_name
    
    ================================================================================
    MSG: pal_device_msgs/LedDataArrayParams
    #Data of the effect, each element in the array represents a led, 
    #length should match device led count
    #For devices with no RGB option, just the alpha channel will be used
    std_msgs/ColorRGBA[] data
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new DoTimedLedEffectGoal(null);
    if (msg.devices !== undefined) {
      resolved.devices = msg.devices;
    }
    else {
      resolved.devices = []
    }

    if (msg.params !== undefined) {
      resolved.params = LedEffectParams.Resolve(msg.params)
    }
    else {
      resolved.params = new LedEffectParams()
    }

    if (msg.effectDuration !== undefined) {
      resolved.effectDuration = msg.effectDuration;
    }
    else {
      resolved.effectDuration = {secs: 0, nsecs: 0}
    }

    if (msg.priority !== undefined) {
      resolved.priority = msg.priority;
    }
    else {
      resolved.priority = 0
    }

    return resolved;
    }
};

module.exports = DoTimedLedEffectGoal;
