// Generated by gencpp from file pal_device_msgs/LedEffectParams.msg
// DO NOT EDIT!


#ifndef PAL_DEVICE_MSGS_MESSAGE_LEDEFFECTPARAMS_H
#define PAL_DEVICE_MSGS_MESSAGE_LEDEFFECTPARAMS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pal_device_msgs/LedFixedColorParams.h>
#include <pal_device_msgs/LedRainbowParams.h>
#include <pal_device_msgs/LedFadeParams.h>
#include <pal_device_msgs/LedBlinkParams.h>
#include <pal_device_msgs/LedProgressParams.h>
#include <pal_device_msgs/LedFlowParams.h>
#include <pal_device_msgs/LedPreProgrammedParams.h>
#include <pal_device_msgs/LedEffectViaTopicParams.h>
#include <pal_device_msgs/LedDataArrayParams.h>

namespace pal_device_msgs
{
template <class ContainerAllocator>
struct LedEffectParams_
{
  typedef LedEffectParams_<ContainerAllocator> Type;

  LedEffectParams_()
    : effectType(0)
    , fixed_color()
    , rainbow()
    , fade()
    , blink()
    , progress()
    , flow()
    , preprogrammed()
    , effect_via_topic()
    , data_array()  {
    }
  LedEffectParams_(const ContainerAllocator& _alloc)
    : effectType(0)
    , fixed_color(_alloc)
    , rainbow(_alloc)
    , fade(_alloc)
    , blink(_alloc)
    , progress(_alloc)
    , flow(_alloc)
    , preprogrammed(_alloc)
    , effect_via_topic(_alloc)
    , data_array(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _effectType_type;
  _effectType_type effectType;

   typedef  ::pal_device_msgs::LedFixedColorParams_<ContainerAllocator>  _fixed_color_type;
  _fixed_color_type fixed_color;

   typedef  ::pal_device_msgs::LedRainbowParams_<ContainerAllocator>  _rainbow_type;
  _rainbow_type rainbow;

   typedef  ::pal_device_msgs::LedFadeParams_<ContainerAllocator>  _fade_type;
  _fade_type fade;

   typedef  ::pal_device_msgs::LedBlinkParams_<ContainerAllocator>  _blink_type;
  _blink_type blink;

   typedef  ::pal_device_msgs::LedProgressParams_<ContainerAllocator>  _progress_type;
  _progress_type progress;

   typedef  ::pal_device_msgs::LedFlowParams_<ContainerAllocator>  _flow_type;
  _flow_type flow;

   typedef  ::pal_device_msgs::LedPreProgrammedParams_<ContainerAllocator>  _preprogrammed_type;
  _preprogrammed_type preprogrammed;

   typedef  ::pal_device_msgs::LedEffectViaTopicParams_<ContainerAllocator>  _effect_via_topic_type;
  _effect_via_topic_type effect_via_topic;

   typedef  ::pal_device_msgs::LedDataArrayParams_<ContainerAllocator>  _data_array_type;
  _data_array_type data_array;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(FIXED_COLOR)
  #undef FIXED_COLOR
#endif
#if defined(_WIN32) && defined(RAINBOW)
  #undef RAINBOW
#endif
#if defined(_WIN32) && defined(FADE)
  #undef FADE
#endif
#if defined(_WIN32) && defined(BLINK)
  #undef BLINK
#endif
#if defined(_WIN32) && defined(PROGRESS)
  #undef PROGRESS
#endif
#if defined(_WIN32) && defined(FLOW)
  #undef FLOW
#endif
#if defined(_WIN32) && defined(PREPROGRAMMED_EFFECT)
  #undef PREPROGRAMMED_EFFECT
#endif
#if defined(_WIN32) && defined(EFFECT_VIA_TOPIC)
  #undef EFFECT_VIA_TOPIC
#endif
#if defined(_WIN32) && defined(DATA_ARRAY)
  #undef DATA_ARRAY
#endif

  enum {
    FIXED_COLOR = 0u,
    RAINBOW = 1u,
    FADE = 2u,
    BLINK = 3u,
    PROGRESS = 4u,
    FLOW = 5u,
    PREPROGRAMMED_EFFECT = 6u,
    EFFECT_VIA_TOPIC = 7u,
    DATA_ARRAY = 8u,
  };


  typedef boost::shared_ptr< ::pal_device_msgs::LedEffectParams_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pal_device_msgs::LedEffectParams_<ContainerAllocator> const> ConstPtr;

}; // struct LedEffectParams_

typedef ::pal_device_msgs::LedEffectParams_<std::allocator<void> > LedEffectParams;

typedef boost::shared_ptr< ::pal_device_msgs::LedEffectParams > LedEffectParamsPtr;
typedef boost::shared_ptr< ::pal_device_msgs::LedEffectParams const> LedEffectParamsConstPtr;

// constants requiring out of line definition

   

   

   

   

   

   

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pal_device_msgs::LedEffectParams_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pal_device_msgs::LedEffectParams_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pal_device_msgs::LedEffectParams_<ContainerAllocator1> & lhs, const ::pal_device_msgs::LedEffectParams_<ContainerAllocator2> & rhs)
{
  return lhs.effectType == rhs.effectType &&
    lhs.fixed_color == rhs.fixed_color &&
    lhs.rainbow == rhs.rainbow &&
    lhs.fade == rhs.fade &&
    lhs.blink == rhs.blink &&
    lhs.progress == rhs.progress &&
    lhs.flow == rhs.flow &&
    lhs.preprogrammed == rhs.preprogrammed &&
    lhs.effect_via_topic == rhs.effect_via_topic &&
    lhs.data_array == rhs.data_array;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pal_device_msgs::LedEffectParams_<ContainerAllocator1> & lhs, const ::pal_device_msgs::LedEffectParams_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pal_device_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pal_device_msgs::LedEffectParams_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pal_device_msgs::LedEffectParams_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_device_msgs::LedEffectParams_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_device_msgs::LedEffectParams_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_device_msgs::LedEffectParams_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_device_msgs::LedEffectParams_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pal_device_msgs::LedEffectParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "cf78e4edf6ae7c6ce024d091a1a3c19a";
  }

  static const char* value(const ::pal_device_msgs::LedEffectParams_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xcf78e4edf6ae7c6cULL;
  static const uint64_t static_value2 = 0xe024d091a1a3c19aULL;
};

template<class ContainerAllocator>
struct DataType< ::pal_device_msgs::LedEffectParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pal_device_msgs/LedEffectParams";
  }

  static const char* value(const ::pal_device_msgs::LedEffectParams_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pal_device_msgs::LedEffectParams_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 FIXED_COLOR=0\n"
"uint8 RAINBOW=1\n"
"uint8 FADE=2\n"
"uint8 BLINK=3\n"
"uint8 PROGRESS=4\n"
"uint8 FLOW=5\n"
"uint8 PREPROGRAMMED_EFFECT=6\n"
"uint8 EFFECT_VIA_TOPIC=7\n"
"uint8 DATA_ARRAY=8\n"
"\n"
"uint8 effectType\n"
"\n"
"# RGBA of color, alpha will be used as intensity if supported by the led\n"
"pal_device_msgs/LedFixedColorParams fixed_color\n"
"pal_device_msgs/LedRainbowParams rainbow\n"
"pal_device_msgs/LedFadeParams fade\n"
"pal_device_msgs/LedBlinkParams blink\n"
"pal_device_msgs/LedProgressParams progress\n"
"pal_device_msgs/LedFlowParams flow\n"
"#Below are device specific, avoid them if you can\n"
"pal_device_msgs/LedPreProgrammedParams preprogrammed\n"
"pal_device_msgs/LedEffectViaTopicParams effect_via_topic\n"
"pal_device_msgs/LedDataArrayParams data_array\n"
"\n"
"================================================================================\n"
"MSG: pal_device_msgs/LedFixedColorParams\n"
"# RGBA of color, alpha will be used as intensity if supported by the led\n"
"std_msgs/ColorRGBA color\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/ColorRGBA\n"
"float32 r\n"
"float32 g\n"
"float32 b\n"
"float32 a\n"
"\n"
"================================================================================\n"
"MSG: pal_device_msgs/LedRainbowParams\n"
"# Time to perform rainbow\n"
"duration transition_duration\n"
"\n"
"================================================================================\n"
"MSG: pal_device_msgs/LedFadeParams\n"
"# RGBA of color, alpha will be used as intensity if supported by the led\n"
"std_msgs/ColorRGBA first_color\n"
"std_msgs/ColorRGBA second_color\n"
"\n"
"#Duration of the transition from one color to the other\n"
"duration transition_duration\n"
"\n"
"#Perform a fade when going from secondColor to firstColor\n"
"bool reverse_fade\n"
"\n"
"\n"
"================================================================================\n"
"MSG: pal_device_msgs/LedBlinkParams\n"
"# RGBA of color, alpha will be used as intensity if supported by the led\n"
"std_msgs/ColorRGBA first_color\n"
"std_msgs/ColorRGBA second_color\n"
"\n"
"duration first_color_duration\n"
"duration second_color_duration\n"
"\n"
"\n"
"================================================================================\n"
"MSG: pal_device_msgs/LedProgressParams\n"
"# RGBA of color, alpha will be used as intensity if supported by the led\n"
"std_msgs/ColorRGBA first_color\n"
"std_msgs/ColorRGBA second_color\n"
"\n"
"#Percentage of pixels painted with the first color\n"
"float32 percentage\n"
"#Offset to begin painting the first color\n"
"float32 led_offset \n"
"\n"
"\n"
"================================================================================\n"
"MSG: pal_device_msgs/LedFlowParams\n"
"# RGBA of color, alpha will be used as intensity if supported by the led\n"
"std_msgs/ColorRGBA first_color\n"
"std_msgs/ColorRGBA second_color\n"
"\n"
"# Percentage of pixels painted with the first color\n"
"float32 percentage\n"
"# Flow velocity\n"
"float32 velocity\n"
"\n"
"\n"
"================================================================================\n"
"MSG: pal_device_msgs/LedPreProgrammedParams\n"
"#Id of pre-programmed effect, most likely device specific\n"
"uint8 preprogrammed_id\n"
"\n"
"================================================================================\n"
"MSG: pal_device_msgs/LedEffectViaTopicParams\n"
"#Topic name, must be of type pal_device_msgs/LedDataArray\n"
"string topic_name\n"
"\n"
"================================================================================\n"
"MSG: pal_device_msgs/LedDataArrayParams\n"
"#Data of the effect, each element in the array represents a led, \n"
"#length should match device led count\n"
"#For devices with no RGB option, just the alpha channel will be used\n"
"std_msgs/ColorRGBA[] data\n"
;
  }

  static const char* value(const ::pal_device_msgs::LedEffectParams_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pal_device_msgs::LedEffectParams_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.effectType);
      stream.next(m.fixed_color);
      stream.next(m.rainbow);
      stream.next(m.fade);
      stream.next(m.blink);
      stream.next(m.progress);
      stream.next(m.flow);
      stream.next(m.preprogrammed);
      stream.next(m.effect_via_topic);
      stream.next(m.data_array);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct LedEffectParams_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pal_device_msgs::LedEffectParams_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pal_device_msgs::LedEffectParams_<ContainerAllocator>& v)
  {
    s << indent << "effectType: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.effectType);
    s << indent << "fixed_color: ";
    s << std::endl;
    Printer< ::pal_device_msgs::LedFixedColorParams_<ContainerAllocator> >::stream(s, indent + "  ", v.fixed_color);
    s << indent << "rainbow: ";
    s << std::endl;
    Printer< ::pal_device_msgs::LedRainbowParams_<ContainerAllocator> >::stream(s, indent + "  ", v.rainbow);
    s << indent << "fade: ";
    s << std::endl;
    Printer< ::pal_device_msgs::LedFadeParams_<ContainerAllocator> >::stream(s, indent + "  ", v.fade);
    s << indent << "blink: ";
    s << std::endl;
    Printer< ::pal_device_msgs::LedBlinkParams_<ContainerAllocator> >::stream(s, indent + "  ", v.blink);
    s << indent << "progress: ";
    s << std::endl;
    Printer< ::pal_device_msgs::LedProgressParams_<ContainerAllocator> >::stream(s, indent + "  ", v.progress);
    s << indent << "flow: ";
    s << std::endl;
    Printer< ::pal_device_msgs::LedFlowParams_<ContainerAllocator> >::stream(s, indent + "  ", v.flow);
    s << indent << "preprogrammed: ";
    s << std::endl;
    Printer< ::pal_device_msgs::LedPreProgrammedParams_<ContainerAllocator> >::stream(s, indent + "  ", v.preprogrammed);
    s << indent << "effect_via_topic: ";
    s << std::endl;
    Printer< ::pal_device_msgs::LedEffectViaTopicParams_<ContainerAllocator> >::stream(s, indent + "  ", v.effect_via_topic);
    s << indent << "data_array: ";
    s << std::endl;
    Printer< ::pal_device_msgs::LedDataArrayParams_<ContainerAllocator> >::stream(s, indent + "  ", v.data_array);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PAL_DEVICE_MSGS_MESSAGE_LEDEFFECTPARAMS_H
