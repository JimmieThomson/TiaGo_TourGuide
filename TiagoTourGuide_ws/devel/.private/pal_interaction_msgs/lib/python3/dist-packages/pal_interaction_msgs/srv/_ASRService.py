# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pal_interaction_msgs/ASRServiceRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import pal_interaction_msgs.msg

class ASRServiceRequest(genpy.Message):
  _md5sum = "bf3afdb7a9717c398d58f3a78181472c"
  _type = "pal_interaction_msgs/ASRServiceRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """pal_interaction_msgs/ASRSrvRequest request

================================================================================
MSG: pal_interaction_msgs/ASRSrvRequest
# Request messages for the recognizer service.
# It is possible to request and activate task, 
# a grammar management task and language change or just
# request the current status.

# Type of request list
int8 ACTIVATION = 1
int8 GRAMMAR = 2
int8 LANGUAGE = 3
int8 STATUS = 4
int8 KWSPOTTING = 5

# Message variables
# list of requests types (several requests can be send in one single message)
int8[] requests

# Information related to each possible request
# except for status that does not need any additional info.
ASRActivation activation
ASRLangModelMngmt model
ASRLanguage lang

================================================================================
MSG: pal_interaction_msgs/ASRActivation
# Message that can be used to send activation commands to the speech recognizer.
# It is possible to activate/deactivate or pause/resume the recognizer with these commands.
# action list
int8 ACTIVATE = 1
int8 DEACTIVATE = 2
int8 PAUSE = 3
int8 RESUME = 4
int8 CALIBRATE = 5

# Message variables
int8 action


================================================================================
MSG: pal_interaction_msgs/ASRLangModelMngmt
# This message is to be used in the ASR service to manage the grammars
# makes possible to enable/disable, load/unload grammars.


# Types of action
int8 ENABLE = 1
int8 DISABLE = 2
int8 LOAD = 3
int8 UNLOAD = 4

# Message variables
# Type of action requested
int8 action

# Name of the grammar to actuate on.
string modelName

================================================================================
MSG: pal_interaction_msgs/ASRLanguage
# This message is to indicate the language
# that has to be set in the speech recognizer
string language
"""
  __slots__ = ['request']
  _slot_types = ['pal_interaction_msgs/ASRSrvRequest']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       request

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ASRServiceRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.request is None:
        self.request = pal_interaction_msgs.msg.ASRSrvRequest()
    else:
      self.request = pal_interaction_msgs.msg.ASRSrvRequest()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.request.requests)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.Struct(pattern).pack(*self.request.requests))
      _x = self
      buff.write(_get_struct_2b().pack(_x.request.activation.action, _x.request.model.action))
      _x = self.request.model.modelName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.request.lang.language
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.request is None:
        self.request = pal_interaction_msgs.msg.ASRSrvRequest()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.request.requests = s.unpack(str[start:end])
      _x = self
      start = end
      end += 2
      (_x.request.activation.action, _x.request.model.action,) = _get_struct_2b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.model.modelName = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.request.model.modelName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.lang.language = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.request.lang.language = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.request.requests)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.request.requests.tostring())
      _x = self
      buff.write(_get_struct_2b().pack(_x.request.activation.action, _x.request.model.action))
      _x = self.request.model.modelName
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.request.lang.language
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.request is None:
        self.request = pal_interaction_msgs.msg.ASRSrvRequest()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.request.requests = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      _x = self
      start = end
      end += 2
      (_x.request.activation.action, _x.request.model.action,) = _get_struct_2b().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.model.modelName = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.request.model.modelName = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.request.lang.language = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.request.lang.language = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2b = None
def _get_struct_2b():
    global _struct_2b
    if _struct_2b is None:
        _struct_2b = struct.Struct("<2b")
    return _struct_2b
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pal_interaction_msgs/ASRServiceResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import pal_interaction_msgs.msg

class ASRServiceResponse(genpy.Message):
  _md5sum = "ea637128b99766dfe061d621936cbd13"
  _type = "pal_interaction_msgs/ASRServiceResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """pal_interaction_msgs/ASRSrvResponse response


================================================================================
MSG: pal_interaction_msgs/ASRSrvResponse
# The status of the ASR with additional error or warning information
ASRStatus status
string error_msg
string warn_msg

================================================================================
MSG: pal_interaction_msgs/ASRStatus
# The status of the ASR
# if it is active then active=true
bool active

# the current language 
string language

# the current enabled grammar
string enabled_grammar

# the current acoustic models
string acoustic_env

# A description of the audio device the 
# recognizer is taking audio from.
AudioDeviceDescription device

================================================================================
MSG: pal_interaction_msgs/AudioDeviceDescription
# Description of an audio device.

int8 SIGNED = 0
int8 UNSIGNED = 1


# name of the device (usually a portaudio name)
string device_name

# sample rate of the acquired audio signal
uint32 sample_rate

# sample size in bits
int8 sample_size

# format can be SIGNED or UNSIGNED
int8 format

# buffer size used to acquire data.
uint16 buffer_size

# number of recorded channels
int8 number_of_channels"""
  __slots__ = ['response']
  _slot_types = ['pal_interaction_msgs/ASRSrvResponse']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       response

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ASRServiceResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.response is None:
        self.response = pal_interaction_msgs.msg.ASRSrvResponse()
    else:
      self.response = pal_interaction_msgs.msg.ASRSrvResponse()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.response.status.active
      buff.write(_get_struct_B().pack(_x))
      _x = self.response.status.language
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.response.status.enabled_grammar
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.response.status.acoustic_env
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.response.status.device.device_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I2bHb().pack(_x.response.status.device.sample_rate, _x.response.status.device.sample_size, _x.response.status.device.format, _x.response.status.device.buffer_size, _x.response.status.device.number_of_channels))
      _x = self.response.error_msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.response.warn_msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.response is None:
        self.response = pal_interaction_msgs.msg.ASRSrvResponse()
      end = 0
      start = end
      end += 1
      (self.response.status.active,) = _get_struct_B().unpack(str[start:end])
      self.response.status.active = bool(self.response.status.active)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.response.status.language = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.response.status.language = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.response.status.enabled_grammar = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.response.status.enabled_grammar = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.response.status.acoustic_env = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.response.status.acoustic_env = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.response.status.device.device_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.response.status.device.device_name = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.response.status.device.sample_rate, _x.response.status.device.sample_size, _x.response.status.device.format, _x.response.status.device.buffer_size, _x.response.status.device.number_of_channels,) = _get_struct_I2bHb().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.response.error_msg = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.response.error_msg = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.response.warn_msg = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.response.warn_msg = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.response.status.active
      buff.write(_get_struct_B().pack(_x))
      _x = self.response.status.language
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.response.status.enabled_grammar
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.response.status.acoustic_env
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.response.status.device.device_name
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_I2bHb().pack(_x.response.status.device.sample_rate, _x.response.status.device.sample_size, _x.response.status.device.format, _x.response.status.device.buffer_size, _x.response.status.device.number_of_channels))
      _x = self.response.error_msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.response.warn_msg
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.response is None:
        self.response = pal_interaction_msgs.msg.ASRSrvResponse()
      end = 0
      start = end
      end += 1
      (self.response.status.active,) = _get_struct_B().unpack(str[start:end])
      self.response.status.active = bool(self.response.status.active)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.response.status.language = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.response.status.language = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.response.status.enabled_grammar = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.response.status.enabled_grammar = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.response.status.acoustic_env = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.response.status.acoustic_env = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.response.status.device.device_name = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.response.status.device.device_name = str[start:end]
      _x = self
      start = end
      end += 9
      (_x.response.status.device.sample_rate, _x.response.status.device.sample_size, _x.response.status.device.format, _x.response.status.device.buffer_size, _x.response.status.device.number_of_channels,) = _get_struct_I2bHb().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.response.error_msg = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.response.error_msg = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.response.warn_msg = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.response.warn_msg = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_I2bHb = None
def _get_struct_I2bHb():
    global _struct_I2bHb
    if _struct_I2bHb is None:
        _struct_I2bHb = struct.Struct("<I2bHb")
    return _struct_I2bHb
class ASRService(object):
  _type          = 'pal_interaction_msgs/ASRService'
  _md5sum = 'f43b49712181a29a41dc6f7687806c53'
  _request_class  = ASRServiceRequest
  _response_class = ASRServiceResponse
