// Generated by gencpp from file pal_interaction_msgs/GetSpeechDurationResponse.msg
// DO NOT EDIT!


#ifndef PAL_INTERACTION_MSGS_MESSAGE_GETSPEECHDURATIONRESPONSE_H
#define PAL_INTERACTION_MSGS_MESSAGE_GETSPEECHDURATIONRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pal_interaction_msgs
{
template <class ContainerAllocator>
struct GetSpeechDurationResponse_
{
  typedef GetSpeechDurationResponse_<ContainerAllocator> Type;

  GetSpeechDurationResponse_()
    : ok(false)
    , words()
    , word_durations()  {
    }
  GetSpeechDurationResponse_(const ContainerAllocator& _alloc)
    : ok(false)
    , words(_alloc)
    , word_durations(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _ok_type;
  _ok_type ok;

   typedef std::vector<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>> _words_type;
  _words_type words;

   typedef std::vector<ros::Duration, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<ros::Duration>> _word_durations_type;
  _word_durations_type word_durations;





  typedef boost::shared_ptr< ::pal_interaction_msgs::GetSpeechDurationResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pal_interaction_msgs::GetSpeechDurationResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetSpeechDurationResponse_

typedef ::pal_interaction_msgs::GetSpeechDurationResponse_<std::allocator<void> > GetSpeechDurationResponse;

typedef boost::shared_ptr< ::pal_interaction_msgs::GetSpeechDurationResponse > GetSpeechDurationResponsePtr;
typedef boost::shared_ptr< ::pal_interaction_msgs::GetSpeechDurationResponse const> GetSpeechDurationResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pal_interaction_msgs::GetSpeechDurationResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pal_interaction_msgs::GetSpeechDurationResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pal_interaction_msgs::GetSpeechDurationResponse_<ContainerAllocator1> & lhs, const ::pal_interaction_msgs::GetSpeechDurationResponse_<ContainerAllocator2> & rhs)
{
  return lhs.ok == rhs.ok &&
    lhs.words == rhs.words &&
    lhs.word_durations == rhs.word_durations;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pal_interaction_msgs::GetSpeechDurationResponse_<ContainerAllocator1> & lhs, const ::pal_interaction_msgs::GetSpeechDurationResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pal_interaction_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pal_interaction_msgs::GetSpeechDurationResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pal_interaction_msgs::GetSpeechDurationResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_interaction_msgs::GetSpeechDurationResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_interaction_msgs::GetSpeechDurationResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_interaction_msgs::GetSpeechDurationResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_interaction_msgs::GetSpeechDurationResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pal_interaction_msgs::GetSpeechDurationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "edc431670f4af519297f5c0254583cfb";
  }

  static const char* value(const ::pal_interaction_msgs::GetSpeechDurationResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xedc431670f4af519ULL;
  static const uint64_t static_value2 = 0x297f5c0254583cfbULL;
};

template<class ContainerAllocator>
struct DataType< ::pal_interaction_msgs::GetSpeechDurationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pal_interaction_msgs/GetSpeechDurationResponse";
  }

  static const char* value(const ::pal_interaction_msgs::GetSpeechDurationResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pal_interaction_msgs::GetSpeechDurationResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool ok\n"
"string[] words\n"
"duration[] word_durations\n"
"\n"
;
  }

  static const char* value(const ::pal_interaction_msgs::GetSpeechDurationResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pal_interaction_msgs::GetSpeechDurationResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ok);
      stream.next(m.words);
      stream.next(m.word_durations);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetSpeechDurationResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pal_interaction_msgs::GetSpeechDurationResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pal_interaction_msgs::GetSpeechDurationResponse_<ContainerAllocator>& v)
  {
    s << indent << "ok: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.ok);
    s << indent << "words[]" << std::endl;
    for (size_t i = 0; i < v.words.size(); ++i)
    {
      s << indent << "  words[" << i << "]: ";
      Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.words[i]);
    }
    s << indent << "word_durations[]" << std::endl;
    for (size_t i = 0; i < v.word_durations.size(); ++i)
    {
      s << indent << "  word_durations[" << i << "]: ";
      Printer<ros::Duration>::stream(s, indent + "  ", v.word_durations[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PAL_INTERACTION_MSGS_MESSAGE_GETSPEECHDURATIONRESPONSE_H
