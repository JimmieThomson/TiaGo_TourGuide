# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pal_detection_msgs/PersonDetections.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import pal_detection_msgs.msg
import std_msgs.msg

class PersonDetections(genpy.Message):
  _md5sum = "10408415efc5efe2cf6f849017dfdff3"
  _type = "pal_detection_msgs/PersonDetections"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """Header header

pal_detection_msgs/PersonDetection[] persons

# Optional transformation between the camera frame and a certain parent frame
geometry_msgs/TransformStamped camera_pose


================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: pal_detection_msgs/PersonDetection
## Contains detection correspondences among the different person detectors available

# full body image detection. If width == height == 0 then no full body detection is available
pal_detection_msgs/Detection2d full_body

# face image detection. If width == height == 0 then the face has not been detected
pal_detection_msgs/FaceDetection face

# leg detection in laser scan. If Point is (0,0,0) then no legs have been detected
pal_detection_msgs/LegDetections legs

# 3D position of the person with respect to a given frame specified in the header of the PointStamped.
# If the position is not available then (0,0,0) is set.
geometry_msgs/PointStamped position3D 


================================================================================
MSG: pal_detection_msgs/Detection2d
## Rectangle defined by a point, its width and height
# corresponds to the openCV struct : CvRect

# coordinates of the top left corner of the box
int64 x
int64 y

# width of the box
int64 width

# height of the box
int64 height


================================================================================
MSG: pal_detection_msgs/FaceDetection

##########################################
#
# Face detection data
#
##########################################

#####################
# Face bounding box
#####################
# coordinates of the top left corner of the box
int32 x
int32 y

# width of the box
int32 width

# height of the box
int32 height

############################
# Eyes position (if found)
############################

bool eyesLocated

int32 leftEyeX
int32 leftEyeY
int32 rightEyeX
int32 rightEyeY

#############################
# Centre of eyes 3D estimate
#############################
geometry_msgs/Point32 position


############################
# Person recognition
############################

string name
float32 confidence

############################
# Gender recognition
############################
string gender
float32 genderConfidence

############################
# Facial expression
############################
string EXPRESSION_NEUTRAL="neutral"
string EXPRESSION_SMILE="smile"
string EXPRESSION_RAISED_BROWS="raised brows"
string EXPRESSION_EYES_AWAY="eyes away"
string EXPRESSION_SQUINTING="squinting"
string EXPRESSION_FROWNING="frowning"
string expression
float32 expression_confidence

############################
# Facial emotion
############################
float32 emotion_anger_confidence
float32 emotion_disgust_confidence
float32 emotion_fear_confidence
float32 emotion_happiness_confidence
float32 emotion_neutral_confidence
float32 emotion_sadness_confidence
float32 emotion_surprise_confidence

================================================================================
MSG: geometry_msgs/Point32
# This contains the position of a point in free space(with 32 bits of precision).
# It is recommeded to use Point wherever possible instead of Point32.  
# 
# This recommendation is to promote interoperability.  
#
# This message is designed to take up less space when sending
# lots of points at once, as in the case of a PointCloud.  

float32 x
float32 y
float32 z
================================================================================
MSG: pal_detection_msgs/LegDetections
## Contains data relative to the detection of the legs of persons in a laser scan

Header header

geometry_msgs/Point[]  position3D    # 3D position of the persons' legs in a given frame

# Optional transformation between the laser frame and a certain parent frame
geometry_msgs/TransformStamped laser_pose


================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/TransformStamped
# This expresses a transform from coordinate frame header.frame_id
# to the coordinate frame child_frame_id
#
# This message is mostly used by the 
# <a href="http://wiki.ros.org/tf">tf</a> package. 
# See its documentation for more information.

Header header
string child_frame_id # the frame id of the child frame
Transform transform

================================================================================
MSG: geometry_msgs/Transform
# This represents the transform between two coordinate frames in free space.

Vector3 translation
Quaternion rotation

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: geometry_msgs/PointStamped
# This represents a Point with reference coordinate frame and timestamp
Header header
Point point
"""
  __slots__ = ['header','persons','camera_pose']
  _slot_types = ['std_msgs/Header','pal_detection_msgs/PersonDetection[]','geometry_msgs/TransformStamped']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,persons,camera_pose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(PersonDetections, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.persons is None:
        self.persons = []
      if self.camera_pose is None:
        self.camera_pose = geometry_msgs.msg.TransformStamped()
    else:
      self.header = std_msgs.msg.Header()
      self.persons = []
      self.camera_pose = geometry_msgs.msg.TransformStamped()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.persons)
      buff.write(_struct_I.pack(length))
      for val1 in self.persons:
        _v1 = val1.full_body
        _x = _v1
        buff.write(_get_struct_4q().pack(_x.x, _x.y, _x.width, _x.height))
        _v2 = val1.face
        _x = _v2
        buff.write(_get_struct_4iB4i().pack(_x.x, _x.y, _x.width, _x.height, _x.eyesLocated, _x.leftEyeX, _x.leftEyeY, _x.rightEyeX, _x.rightEyeY))
        _v3 = _v2.position
        _x = _v3
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v2.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v2.confidence
        buff.write(_get_struct_f().pack(_x))
        _x = _v2.gender
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v2.genderConfidence
        buff.write(_get_struct_f().pack(_x))
        _x = _v2.expression
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v2
        buff.write(_get_struct_8f().pack(_x.expression_confidence, _x.emotion_anger_confidence, _x.emotion_disgust_confidence, _x.emotion_fear_confidence, _x.emotion_happiness_confidence, _x.emotion_neutral_confidence, _x.emotion_sadness_confidence, _x.emotion_surprise_confidence))
        _v4 = val1.legs
        _v5 = _v4.header
        _x = _v5.seq
        buff.write(_get_struct_I().pack(_x))
        _v6 = _v5.stamp
        _x = _v6
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v5.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v4.position3D)
        buff.write(_struct_I.pack(length))
        for val3 in _v4.position3D:
          _x = val3
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v7 = _v4.laser_pose
        _v8 = _v7.header
        _x = _v8.seq
        buff.write(_get_struct_I().pack(_x))
        _v9 = _v8.stamp
        _x = _v9
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v8.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v7.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v10 = _v7.transform
        _v11 = _v10.translation
        _x = _v11
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v12 = _v10.rotation
        _x = _v12
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v13 = val1.position3D
        _v14 = _v13.header
        _x = _v14.seq
        buff.write(_get_struct_I().pack(_x))
        _v15 = _v14.stamp
        _x = _v15
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v14.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v16 = _v13.point
        _x = _v16
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_3I().pack(_x.camera_pose.header.seq, _x.camera_pose.header.stamp.secs, _x.camera_pose.header.stamp.nsecs))
      _x = self.camera_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.camera_pose.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.camera_pose.transform.translation.x, _x.camera_pose.transform.translation.y, _x.camera_pose.transform.translation.z, _x.camera_pose.transform.rotation.x, _x.camera_pose.transform.rotation.y, _x.camera_pose.transform.rotation.z, _x.camera_pose.transform.rotation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.persons is None:
        self.persons = None
      if self.camera_pose is None:
        self.camera_pose = geometry_msgs.msg.TransformStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.persons = []
      for i in range(0, length):
        val1 = pal_detection_msgs.msg.PersonDetection()
        _v17 = val1.full_body
        _x = _v17
        start = end
        end += 32
        (_x.x, _x.y, _x.width, _x.height,) = _get_struct_4q().unpack(str[start:end])
        _v18 = val1.face
        _x = _v18
        start = end
        end += 33
        (_x.x, _x.y, _x.width, _x.height, _x.eyesLocated, _x.leftEyeX, _x.leftEyeY, _x.rightEyeX, _x.rightEyeY,) = _get_struct_4iB4i().unpack(str[start:end])
        _v18.eyesLocated = bool(_v18.eyesLocated)
        _v19 = _v18.position
        _x = _v19
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v18.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v18.name = str[start:end]
        start = end
        end += 4
        (_v18.confidence,) = _get_struct_f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v18.gender = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v18.gender = str[start:end]
        start = end
        end += 4
        (_v18.genderConfidence,) = _get_struct_f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v18.expression = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v18.expression = str[start:end]
        _x = _v18
        start = end
        end += 32
        (_x.expression_confidence, _x.emotion_anger_confidence, _x.emotion_disgust_confidence, _x.emotion_fear_confidence, _x.emotion_happiness_confidence, _x.emotion_neutral_confidence, _x.emotion_sadness_confidence, _x.emotion_surprise_confidence,) = _get_struct_8f().unpack(str[start:end])
        _v20 = val1.legs
        _v21 = _v20.header
        start = end
        end += 4
        (_v21.seq,) = _get_struct_I().unpack(str[start:end])
        _v22 = _v21.stamp
        _x = _v22
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v21.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v21.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v20.position3D = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v20.position3D.append(val3)
        _v23 = _v20.laser_pose
        _v24 = _v23.header
        start = end
        end += 4
        (_v24.seq,) = _get_struct_I().unpack(str[start:end])
        _v25 = _v24.stamp
        _x = _v25
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v24.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v24.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v23.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v23.child_frame_id = str[start:end]
        _v26 = _v23.transform
        _v27 = _v26.translation
        _x = _v27
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v28 = _v26.rotation
        _x = _v28
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v29 = val1.position3D
        _v30 = _v29.header
        start = end
        end += 4
        (_v30.seq,) = _get_struct_I().unpack(str[start:end])
        _v31 = _v30.stamp
        _x = _v31
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v30.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v30.frame_id = str[start:end]
        _v32 = _v29.point
        _x = _v32
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.persons.append(val1)
      _x = self
      start = end
      end += 12
      (_x.camera_pose.header.seq, _x.camera_pose.header.stamp.secs, _x.camera_pose.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.camera_pose.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_pose.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.camera_pose.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.camera_pose.transform.translation.x, _x.camera_pose.transform.translation.y, _x.camera_pose.transform.translation.z, _x.camera_pose.transform.rotation.x, _x.camera_pose.transform.rotation.y, _x.camera_pose.transform.rotation.z, _x.camera_pose.transform.rotation.w,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.persons)
      buff.write(_struct_I.pack(length))
      for val1 in self.persons:
        _v33 = val1.full_body
        _x = _v33
        buff.write(_get_struct_4q().pack(_x.x, _x.y, _x.width, _x.height))
        _v34 = val1.face
        _x = _v34
        buff.write(_get_struct_4iB4i().pack(_x.x, _x.y, _x.width, _x.height, _x.eyesLocated, _x.leftEyeX, _x.leftEyeY, _x.rightEyeX, _x.rightEyeY))
        _v35 = _v34.position
        _x = _v35
        buff.write(_get_struct_3f().pack(_x.x, _x.y, _x.z))
        _x = _v34.name
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v34.confidence
        buff.write(_get_struct_f().pack(_x))
        _x = _v34.gender
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v34.genderConfidence
        buff.write(_get_struct_f().pack(_x))
        _x = _v34.expression
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v34
        buff.write(_get_struct_8f().pack(_x.expression_confidence, _x.emotion_anger_confidence, _x.emotion_disgust_confidence, _x.emotion_fear_confidence, _x.emotion_happiness_confidence, _x.emotion_neutral_confidence, _x.emotion_sadness_confidence, _x.emotion_surprise_confidence))
        _v36 = val1.legs
        _v37 = _v36.header
        _x = _v37.seq
        buff.write(_get_struct_I().pack(_x))
        _v38 = _v37.stamp
        _x = _v38
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v37.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        length = len(_v36.position3D)
        buff.write(_struct_I.pack(length))
        for val3 in _v36.position3D:
          _x = val3
          buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v39 = _v36.laser_pose
        _v40 = _v39.header
        _x = _v40.seq
        buff.write(_get_struct_I().pack(_x))
        _v41 = _v40.stamp
        _x = _v41
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v40.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = _v39.child_frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v42 = _v39.transform
        _v43 = _v42.translation
        _x = _v43
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        _v44 = _v42.rotation
        _x = _v44
        buff.write(_get_struct_4d().pack(_x.x, _x.y, _x.z, _x.w))
        _v45 = val1.position3D
        _v46 = _v45.header
        _x = _v46.seq
        buff.write(_get_struct_I().pack(_x))
        _v47 = _v46.stamp
        _x = _v47
        buff.write(_get_struct_2I().pack(_x.secs, _x.nsecs))
        _x = _v46.frame_id
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v48 = _v45.point
        _x = _v48
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
      _x = self
      buff.write(_get_struct_3I().pack(_x.camera_pose.header.seq, _x.camera_pose.header.stamp.secs, _x.camera_pose.header.stamp.nsecs))
      _x = self.camera_pose.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.camera_pose.child_frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_7d().pack(_x.camera_pose.transform.translation.x, _x.camera_pose.transform.translation.y, _x.camera_pose.transform.translation.z, _x.camera_pose.transform.rotation.x, _x.camera_pose.transform.rotation.y, _x.camera_pose.transform.rotation.z, _x.camera_pose.transform.rotation.w))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.persons is None:
        self.persons = None
      if self.camera_pose is None:
        self.camera_pose = geometry_msgs.msg.TransformStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.persons = []
      for i in range(0, length):
        val1 = pal_detection_msgs.msg.PersonDetection()
        _v49 = val1.full_body
        _x = _v49
        start = end
        end += 32
        (_x.x, _x.y, _x.width, _x.height,) = _get_struct_4q().unpack(str[start:end])
        _v50 = val1.face
        _x = _v50
        start = end
        end += 33
        (_x.x, _x.y, _x.width, _x.height, _x.eyesLocated, _x.leftEyeX, _x.leftEyeY, _x.rightEyeX, _x.rightEyeY,) = _get_struct_4iB4i().unpack(str[start:end])
        _v50.eyesLocated = bool(_v50.eyesLocated)
        _v51 = _v50.position
        _x = _v51
        start = end
        end += 12
        (_x.x, _x.y, _x.z,) = _get_struct_3f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v50.name = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v50.name = str[start:end]
        start = end
        end += 4
        (_v50.confidence,) = _get_struct_f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v50.gender = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v50.gender = str[start:end]
        start = end
        end += 4
        (_v50.genderConfidence,) = _get_struct_f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v50.expression = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v50.expression = str[start:end]
        _x = _v50
        start = end
        end += 32
        (_x.expression_confidence, _x.emotion_anger_confidence, _x.emotion_disgust_confidence, _x.emotion_fear_confidence, _x.emotion_happiness_confidence, _x.emotion_neutral_confidence, _x.emotion_sadness_confidence, _x.emotion_surprise_confidence,) = _get_struct_8f().unpack(str[start:end])
        _v52 = val1.legs
        _v53 = _v52.header
        start = end
        end += 4
        (_v53.seq,) = _get_struct_I().unpack(str[start:end])
        _v54 = _v53.stamp
        _x = _v54
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v53.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v53.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        _v52.position3D = []
        for i in range(0, length):
          val3 = geometry_msgs.msg.Point()
          _x = val3
          start = end
          end += 24
          (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
          _v52.position3D.append(val3)
        _v55 = _v52.laser_pose
        _v56 = _v55.header
        start = end
        end += 4
        (_v56.seq,) = _get_struct_I().unpack(str[start:end])
        _v57 = _v56.stamp
        _x = _v57
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v56.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v56.frame_id = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v55.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v55.child_frame_id = str[start:end]
        _v58 = _v55.transform
        _v59 = _v58.translation
        _x = _v59
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        _v60 = _v58.rotation
        _x = _v60
        start = end
        end += 32
        (_x.x, _x.y, _x.z, _x.w,) = _get_struct_4d().unpack(str[start:end])
        _v61 = val1.position3D
        _v62 = _v61.header
        start = end
        end += 4
        (_v62.seq,) = _get_struct_I().unpack(str[start:end])
        _v63 = _v62.stamp
        _x = _v63
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _get_struct_2I().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v62.frame_id = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v62.frame_id = str[start:end]
        _v64 = _v61.point
        _x = _v64
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        self.persons.append(val1)
      _x = self
      start = end
      end += 12
      (_x.camera_pose.header.seq, _x.camera_pose.header.stamp.secs, _x.camera_pose.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_pose.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.camera_pose.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.camera_pose.child_frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.camera_pose.child_frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.camera_pose.transform.translation.x, _x.camera_pose.transform.translation.y, _x.camera_pose.transform.translation.z, _x.camera_pose.transform.rotation.x, _x.camera_pose.transform.rotation.y, _x.camera_pose.transform.rotation.z, _x.camera_pose.transform.rotation.w,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_3f = None
def _get_struct_3f():
    global _struct_3f
    if _struct_3f is None:
        _struct_3f = struct.Struct("<3f")
    return _struct_3f
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_4iB4i = None
def _get_struct_4iB4i():
    global _struct_4iB4i
    if _struct_4iB4i is None:
        _struct_4iB4i = struct.Struct("<4iB4i")
    return _struct_4iB4i
_struct_4q = None
def _get_struct_4q():
    global _struct_4q
    if _struct_4q is None:
        _struct_4q = struct.Struct("<4q")
    return _struct_4q
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
_struct_8f = None
def _get_struct_8f():
    global _struct_8f
    if _struct_8f is None:
        _struct_8f = struct.Struct("<8f")
    return _struct_8f
_struct_f = None
def _get_struct_f():
    global _struct_f
    if _struct_f is None:
        _struct_f = struct.Struct("<f")
    return _struct_f
