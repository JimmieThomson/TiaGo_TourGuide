# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pal_detection_msgs/Obstacle.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg

class Obstacle(genpy.Message):
  _md5sum = "f54f4740aa4421a380e2a892d19fe612"
  _type = "pal_detection_msgs/Obstacle"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int64 id

geometry_msgs/Point position

float64[4] position_covariance

float32 width

float32 height
================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z
"""
  __slots__ = ['id','position','position_covariance','width','height']
  _slot_types = ['int64','geometry_msgs/Point','float64[4]','float32','float32']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       id,position,position_covariance,width,height

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Obstacle, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.id is None:
        self.id = 0
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      if self.position_covariance is None:
        self.position_covariance = [0.] * 4
      if self.width is None:
        self.width = 0.
      if self.height is None:
        self.height = 0.
    else:
      self.id = 0
      self.position = geometry_msgs.msg.Point()
      self.position_covariance = [0.] * 4
      self.width = 0.
      self.height = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_q3d().pack(_x.id, _x.position.x, _x.position.y, _x.position.z))
      buff.write(_get_struct_4d().pack(*self.position_covariance))
      _x = self
      buff.write(_get_struct_2f().pack(_x.width, _x.height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.id, _x.position.x, _x.position.y, _x.position.z,) = _get_struct_q3d().unpack(str[start:end])
      start = end
      end += 32
      self.position_covariance = _get_struct_4d().unpack(str[start:end])
      _x = self
      start = end
      end += 8
      (_x.width, _x.height,) = _get_struct_2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_q3d().pack(_x.id, _x.position.x, _x.position.y, _x.position.z))
      buff.write(self.position_covariance.tostring())
      _x = self
      buff.write(_get_struct_2f().pack(_x.width, _x.height))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position is None:
        self.position = geometry_msgs.msg.Point()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.id, _x.position.x, _x.position.y, _x.position.z,) = _get_struct_q3d().unpack(str[start:end])
      start = end
      end += 32
      self.position_covariance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=4)
      _x = self
      start = end
      end += 8
      (_x.width, _x.height,) = _get_struct_2f().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2f = None
def _get_struct_2f():
    global _struct_2f
    if _struct_2f is None:
        _struct_2f = struct.Struct("<2f")
    return _struct_2f
_struct_4d = None
def _get_struct_4d():
    global _struct_4d
    if _struct_4d is None:
        _struct_4d = struct.Struct("<4d")
    return _struct_4d
_struct_q3d = None
def _get_struct_q3d():
    global _struct_q3d
    if _struct_q3d is None:
        _struct_q3d = struct.Struct("<q3d")
    return _struct_q3d
