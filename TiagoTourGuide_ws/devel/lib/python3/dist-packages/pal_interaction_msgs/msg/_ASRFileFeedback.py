# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pal_interaction_msgs/ASRFileFeedback.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import pal_interaction_msgs.msg

class ASRFileFeedback(genpy.Message):
  _md5sum = "e8f3da6b7eb47ddaa66e1eca614ca0be"
  _type = "pal_interaction_msgs/ASRFileFeedback"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#feedback definition
# At the inmediate time an utterance is recognised
# it is published here.
asrresult recognised_utterance


================================================================================
MSG: pal_interaction_msgs/asrresult
## Message that containes the recognized utterance.
## Confidence values
int8 CONFIDENCE_UNDEFINED = -1
int8 CONFIDENCE_POOR = 1
int8 CONFIDENCE_LOW  = 2
int8 CONFIDENCE_GOOD = 3
int8 CONFIDENCE_MAX  = 4

# ASR result messages used by RosRecognizerServer

# text recognized
string text

# confidence with values from POOR to MAX
int8 confidence

# start and end of the recognizer uterance.
time start
time end

# list of recognized tags
# key value pairs of strings extracted from the text
# given the action tags placed in the grammar.
actiontag[] tags

================================================================================
MSG: pal_interaction_msgs/actiontag
# Action tag contaings the key/value information genertated by parsing the recognised text with a JSGF grammar 

string key
string value"""
  __slots__ = ['recognised_utterance']
  _slot_types = ['pal_interaction_msgs/asrresult']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       recognised_utterance

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(ASRFileFeedback, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.recognised_utterance is None:
        self.recognised_utterance = pal_interaction_msgs.msg.asrresult()
    else:
      self.recognised_utterance = pal_interaction_msgs.msg.asrresult()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.recognised_utterance.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_b4I().pack(_x.recognised_utterance.confidence, _x.recognised_utterance.start.secs, _x.recognised_utterance.start.nsecs, _x.recognised_utterance.end.secs, _x.recognised_utterance.end.nsecs))
      length = len(self.recognised_utterance.tags)
      buff.write(_struct_I.pack(length))
      for val1 in self.recognised_utterance.tags:
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.value
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.recognised_utterance is None:
        self.recognised_utterance = pal_interaction_msgs.msg.asrresult()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.recognised_utterance.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.recognised_utterance.text = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.recognised_utterance.confidence, _x.recognised_utterance.start.secs, _x.recognised_utterance.start.nsecs, _x.recognised_utterance.end.secs, _x.recognised_utterance.end.nsecs,) = _get_struct_b4I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.recognised_utterance.tags = []
      for i in range(0, length):
        val1 = pal_interaction_msgs.msg.actiontag()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.value = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.value = str[start:end]
        self.recognised_utterance.tags.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.recognised_utterance.text
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self
      buff.write(_get_struct_b4I().pack(_x.recognised_utterance.confidence, _x.recognised_utterance.start.secs, _x.recognised_utterance.start.nsecs, _x.recognised_utterance.end.secs, _x.recognised_utterance.end.nsecs))
      length = len(self.recognised_utterance.tags)
      buff.write(_struct_I.pack(length))
      for val1 in self.recognised_utterance.tags:
        _x = val1.key
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _x = val1.value
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.recognised_utterance is None:
        self.recognised_utterance = pal_interaction_msgs.msg.asrresult()
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.recognised_utterance.text = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.recognised_utterance.text = str[start:end]
      _x = self
      start = end
      end += 17
      (_x.recognised_utterance.confidence, _x.recognised_utterance.start.secs, _x.recognised_utterance.start.nsecs, _x.recognised_utterance.end.secs, _x.recognised_utterance.end.nsecs,) = _get_struct_b4I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.recognised_utterance.tags = []
      for i in range(0, length):
        val1 = pal_interaction_msgs.msg.actiontag()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.key = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.key = str[start:end]
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1.value = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1.value = str[start:end]
        self.recognised_utterance.tags.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_b4I = None
def _get_struct_b4I():
    global _struct_b4I
    if _struct_b4I is None:
        _struct_b4I = struct.Struct("<b4I")
    return _struct_b4I
