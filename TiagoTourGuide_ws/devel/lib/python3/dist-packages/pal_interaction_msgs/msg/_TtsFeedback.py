# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pal_interaction_msgs/TtsFeedback.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import pal_interaction_msgs.msg

class TtsFeedback(genpy.Message):
  _md5sum = "05870cd8b62fcb00e76ae3889c0ed8f1"
  _type = "pal_interaction_msgs/TtsFeedback"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
## feedback

# Everytime one of the following events occuring
# during the synthesis process a feedback message
# will be published.
# Only TTS_EVENT_STARTED_PLAYING_WORD and 
# TTS_EVENT_MARK are implemented now.

uint16 TTS_EVENT_INITIALIZATION = 1
uint16 TTS_EVENT_SHUTDOWN = 2
uint16 TTS_EVENT_SYNCHRONIZATION = 4
uint16 TTS_EVENT_FINISHED_PLAYING_UTTERANCE = 8
uint16 TTS_EVENT_MARK = 16
uint16 TTS_EVENT_STARTED_PLAYING_WORD = 32
uint16 TTS_EVENT_FINISHED_PLAYING_PHRASE = 64
uint16 TTS_EVENT_FINISHED_PLAYING_SENTENCE = 128
uint16 TTS_EVENT_VISEME = 256

# Store the event type and can be used
# to filter messages depending on the type of 
# events we are interested in

uint16 event_type

# Time since the begining of the synthesis
# at which the event occured.

time timestamp

# Text said until now, 
# it will contain the current word in case of WORD events

string text_said

# Next word to be pronounced
# (not implemented)
string next_word

string viseme_id

# Everytime a mark like this one
# <mark name="markname"/> is present in the text
# a MARK event will be generated with the 'name' 
# argument value as mark id. Other fields
# different from the mark_id are not implemented.

TtsMark marks


================================================================================
MSG: pal_interaction_msgs/TtsMark
# id will contain the value of name argument in the <mark/>
# tags when they are placed in synthesised text.
# Filling keys and value is not implemented yet.
string id
string[] keys
string[] value"""
  # Pseudo-constants
  TTS_EVENT_INITIALIZATION = 1
  TTS_EVENT_SHUTDOWN = 2
  TTS_EVENT_SYNCHRONIZATION = 4
  TTS_EVENT_FINISHED_PLAYING_UTTERANCE = 8
  TTS_EVENT_MARK = 16
  TTS_EVENT_STARTED_PLAYING_WORD = 32
  TTS_EVENT_FINISHED_PLAYING_PHRASE = 64
  TTS_EVENT_FINISHED_PLAYING_SENTENCE = 128
  TTS_EVENT_VISEME = 256

  __slots__ = ['event_type','timestamp','text_said','next_word','viseme_id','marks']
  _slot_types = ['uint16','time','string','string','string','pal_interaction_msgs/TtsMark']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       event_type,timestamp,text_said,next_word,viseme_id,marks

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(TtsFeedback, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.event_type is None:
        self.event_type = 0
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.text_said is None:
        self.text_said = ''
      if self.next_word is None:
        self.next_word = ''
      if self.viseme_id is None:
        self.viseme_id = ''
      if self.marks is None:
        self.marks = pal_interaction_msgs.msg.TtsMark()
    else:
      self.event_type = 0
      self.timestamp = genpy.Time()
      self.text_said = ''
      self.next_word = ''
      self.viseme_id = ''
      self.marks = pal_interaction_msgs.msg.TtsMark()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_H2I().pack(_x.event_type, _x.timestamp.secs, _x.timestamp.nsecs))
      _x = self.text_said
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.next_word
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.viseme_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.marks.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.marks.keys)
      buff.write(_struct_I.pack(length))
      for val1 in self.marks.keys:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.marks.value)
      buff.write(_struct_I.pack(length))
      for val1 in self.marks.value:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.marks is None:
        self.marks = pal_interaction_msgs.msg.TtsMark()
      end = 0
      _x = self
      start = end
      end += 10
      (_x.event_type, _x.timestamp.secs, _x.timestamp.nsecs,) = _get_struct_H2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.text_said = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.text_said = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.next_word = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.next_word = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.viseme_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.viseme_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.marks.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.marks.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.marks.keys = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.marks.keys.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.marks.value = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.marks.value.append(val1)
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_H2I().pack(_x.event_type, _x.timestamp.secs, _x.timestamp.nsecs))
      _x = self.text_said
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.next_word
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.viseme_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.marks.id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      length = len(self.marks.keys)
      buff.write(_struct_I.pack(length))
      for val1 in self.marks.keys:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
      length = len(self.marks.value)
      buff.write(_struct_I.pack(length))
      for val1 in self.marks.value:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.Struct('<I%ss'%length).pack(length, val1))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.timestamp is None:
        self.timestamp = genpy.Time()
      if self.marks is None:
        self.marks = pal_interaction_msgs.msg.TtsMark()
      end = 0
      _x = self
      start = end
      end += 10
      (_x.event_type, _x.timestamp.secs, _x.timestamp.nsecs,) = _get_struct_H2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.text_said = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.text_said = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.next_word = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.next_word = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.viseme_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.viseme_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.marks.id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.marks.id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.marks.keys = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.marks.keys.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.marks.value = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8', 'rosmsg')
        else:
          val1 = str[start:end]
        self.marks.value.append(val1)
      self.timestamp.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_H2I = None
def _get_struct_H2I():
    global _struct_H2I
    if _struct_H2I is None:
        _struct_H2I = struct.Struct("<H2I")
    return _struct_H2I
