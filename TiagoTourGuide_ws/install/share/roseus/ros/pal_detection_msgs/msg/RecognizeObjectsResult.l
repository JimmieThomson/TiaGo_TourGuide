;; Auto-generated. Do not edit!


(when (boundp 'pal_detection_msgs::RecognizeObjectsResult)
  (if (not (find-package "PAL_DETECTION_MSGS"))
    (make-package "PAL_DETECTION_MSGS"))
  (shadow 'RecognizeObjectsResult (find-package "PAL_DETECTION_MSGS")))
(unless (find-package "PAL_DETECTION_MSGS::RECOGNIZEOBJECTSRESULT")
  (make-package "PAL_DETECTION_MSGS::RECOGNIZEOBJECTSRESULT"))

(in-package "ROS")
;;//! \htmlinclude RecognizeObjectsResult.msg.html
(if (not (find-package "SENSOR_MSGS"))
  (ros::roseus-add-msgs "sensor_msgs"))


(defclass pal_detection_msgs::RecognizeObjectsResult
  :super ros::object
  :slots (_image _num_detections _recognized_objects ))

(defmethod pal_detection_msgs::RecognizeObjectsResult
  (:init
   (&key
    ((:image __image) (instance sensor_msgs::CompressedImage :init))
    ((:num_detections __num_detections) 0)
    ((:recognized_objects __recognized_objects) (instance pal_detection_msgs::RecognizedObjectArray :init))
    )
   (send-super :init)
   (setq _image __image)
   (setq _num_detections (round __num_detections))
   (setq _recognized_objects __recognized_objects)
   self)
  (:image
   (&rest __image)
   (if (keywordp (car __image))
       (send* _image __image)
     (progn
       (if __image (setq _image (car __image)))
       _image)))
  (:num_detections
   (&optional __num_detections)
   (if __num_detections (setq _num_detections __num_detections)) _num_detections)
  (:recognized_objects
   (&rest __recognized_objects)
   (if (keywordp (car __recognized_objects))
       (send* _recognized_objects __recognized_objects)
     (progn
       (if __recognized_objects (setq _recognized_objects (car __recognized_objects)))
       _recognized_objects)))
  (:serialization-length
   ()
   (+
    ;; sensor_msgs/CompressedImage _image
    (send _image :serialization-length)
    ;; int16 _num_detections
    2
    ;; pal_detection_msgs/RecognizedObjectArray _recognized_objects
    (send _recognized_objects :serialization-length)
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; sensor_msgs/CompressedImage _image
       (send _image :serialize s)
     ;; int16 _num_detections
       (write-word _num_detections s)
     ;; pal_detection_msgs/RecognizedObjectArray _recognized_objects
       (send _recognized_objects :serialize s)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; sensor_msgs/CompressedImage _image
     (send _image :deserialize buf ptr-) (incf ptr- (send _image :serialization-length))
   ;; int16 _num_detections
     (setq _num_detections (sys::peek buf ptr- :short)) (incf ptr- 2)
   ;; pal_detection_msgs/RecognizedObjectArray _recognized_objects
     (send _recognized_objects :deserialize buf ptr-) (incf ptr- (send _recognized_objects :serialization-length))
   ;;
   self)
  )

(setf (get pal_detection_msgs::RecognizeObjectsResult :md5sum-) "bcbaf988f66109a3344efd678c9c5f28")
(setf (get pal_detection_msgs::RecognizeObjectsResult :datatype-) "pal_detection_msgs/RecognizeObjectsResult")
(setf (get pal_detection_msgs::RecognizeObjectsResult :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
# image: The resultant image with recognized objects
sensor_msgs/CompressedImage image

# num_detections: The number of detected objects
int16 num_detections

# Send the found objects, see the msg files for docs
pal_detection_msgs/RecognizedObjectArray recognized_objects

================================================================================
MSG: sensor_msgs/CompressedImage
# This message contains a compressed image

Header header        # Header timestamp should be acquisition time of image
                     # Header frame_id should be optical frame of camera
                     # origin of frame should be optical center of camera
                     # +x should point to the right in the image
                     # +y should point down in the image
                     # +z should point into to plane of the image

string format        # Specifies the format of the data
                     #   Acceptable values:
                     #     jpeg, png
uint8[] data         # Compressed image buffer

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: pal_detection_msgs/RecognizedObjectArray
Header header

# This message type describes a potential scene configuration: a set of objects that can explain the scene
pal_detection_msgs/RecognizedObject[] objects

================================================================================
MSG: pal_detection_msgs/RecognizedObject
# Contains information about the class of a found object, along with its confidence and ROI of detection

# class: The respective class type of the found object
string object_class

# confidence: how sure you are it is that object and not another one.
# It is between 0 and 1 and the closer to one it is the better
float32 confidence

# bounding_box: The region of the image, where the object is found
sensor_msgs/RegionOfInterest bounding_box

================================================================================
MSG: sensor_msgs/RegionOfInterest
# This message is used to specify a region of interest within an image.
#
# When used to specify the ROI setting of the camera when the image was
# taken, the height and width fields should either match the height and
# width fields for the associated image; or height = width = 0
# indicates that the full resolution image was captured.

uint32 x_offset  # Leftmost pixel of the ROI
                 # (0 if the ROI includes the left edge of the image)
uint32 y_offset  # Topmost pixel of the ROI
                 # (0 if the ROI includes the top edge of the image)
uint32 height    # Height of ROI
uint32 width     # Width of ROI

# True if a distinct rectified ROI should be calculated from the \"raw\"
# ROI in this message. Typically this should be False if the full image
# is captured (ROI not used), and True if a subwindow is captured (ROI
# used).
bool do_rectify

")



(provide :pal_detection_msgs/RecognizeObjectsResult "bcbaf988f66109a3344efd678c9c5f28")


