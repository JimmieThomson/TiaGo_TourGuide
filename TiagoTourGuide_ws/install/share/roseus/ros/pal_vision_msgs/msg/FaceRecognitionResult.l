;; Auto-generated. Do not edit!


(when (boundp 'pal_vision_msgs::FaceRecognitionResult)
  (if (not (find-package "PAL_VISION_MSGS"))
    (make-package "PAL_VISION_MSGS"))
  (shadow 'FaceRecognitionResult (find-package "PAL_VISION_MSGS")))
(unless (find-package "PAL_VISION_MSGS::FACERECOGNITIONRESULT")
  (make-package "PAL_VISION_MSGS::FACERECOGNITIONRESULT"))

(in-package "ROS")
;;//! \htmlinclude FaceRecognitionResult.msg.html


(defclass pal_vision_msgs::FaceRecognitionResult
  :super ros::object
  :slots (_order_id _names _confidence ))

(defmethod pal_vision_msgs::FaceRecognitionResult
  (:init
   (&key
    ((:order_id __order_id) 0)
    ((:names __names) (let (r) (dotimes (i 0) (push "" r)) r))
    ((:confidence __confidence) (make-array 0 :initial-element 0.0 :element-type :float))
    )
   (send-super :init)
   (setq _order_id (round __order_id))
   (setq _names __names)
   (setq _confidence __confidence)
   self)
  (:order_id
   (&optional __order_id)
   (if __order_id (setq _order_id __order_id)) _order_id)
  (:names
   (&optional __names)
   (if __names (setq _names __names)) _names)
  (:confidence
   (&optional __confidence)
   (if __confidence (setq _confidence __confidence)) _confidence)
  (:serialization-length
   ()
   (+
    ;; uint8 _order_id
    1
    ;; string[] _names
    (apply #'+ (mapcar #'(lambda (x) (+ 4 (length x))) _names)) 4
    ;; float32[] _confidence
    (* 4    (length _confidence)) 4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; uint8 _order_id
       (write-byte _order_id s)
     ;; string[] _names
     (write-long (length _names) s)
     (dolist (elem _names)
       (write-long (length elem) s) (princ elem s)
       )
     ;; float32[] _confidence
     (write-long (length _confidence) s)
     (dotimes (i (length _confidence))
       (sys::poke (elt _confidence i) (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
       )
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; uint8 _order_id
     (setq _order_id (sys::peek buf ptr- :char)) (incf ptr- 1)
   ;; string[] _names
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _names (make-list n))
     (dotimes (i n)
     (let (n) (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4) (setf (elt _names i) (subseq buf ptr- (+ ptr- n))) (incf ptr- n))
     ))
   ;; float32[] _confidence
   (let (n)
     (setq n (sys::peek buf ptr- :integer)) (incf ptr- 4)
     (setq _confidence (instantiate float-vector n))
     (dotimes (i n)
     (setf (elt _confidence i) (sys::peek buf ptr- :float)) (incf ptr- 4)
     ))
   ;;
   self)
  )

(setf (get pal_vision_msgs::FaceRecognitionResult :md5sum-) "1354b7478703dcb5d9e033b8bdfafb3b")
(setf (get pal_vision_msgs::FaceRecognitionResult :datatype-) "pal_vision_msgs/FaceRecognitionResult")
(setf (get pal_vision_msgs::FaceRecognitionResult :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#result definition
uint8   order_id
string[]  names
float32[] confidence

")



(provide :pal_vision_msgs/FaceRecognitionResult "1354b7478703dcb5d9e033b8bdfafb3b")


