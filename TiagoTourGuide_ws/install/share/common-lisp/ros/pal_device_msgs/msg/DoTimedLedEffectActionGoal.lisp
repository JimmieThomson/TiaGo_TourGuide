; Auto-generated. Do not edit!


(cl:in-package pal_device_msgs-msg)


;//! \htmlinclude DoTimedLedEffectActionGoal.msg.html

(cl:defclass <DoTimedLedEffectActionGoal> (roslisp-msg-protocol:ros-message)
  ((header
    :reader header
    :initarg :header
    :type std_msgs-msg:Header
    :initform (cl:make-instance 'std_msgs-msg:Header))
   (goal_id
    :reader goal_id
    :initarg :goal_id
    :type actionlib_msgs-msg:GoalID
    :initform (cl:make-instance 'actionlib_msgs-msg:GoalID))
   (goal
    :reader goal
    :initarg :goal
    :type pal_device_msgs-msg:DoTimedLedEffectGoal
    :initform (cl:make-instance 'pal_device_msgs-msg:DoTimedLedEffectGoal)))
)

(cl:defclass DoTimedLedEffectActionGoal (<DoTimedLedEffectActionGoal>)
  ())

(cl:defmethod cl:initialize-instance :after ((m <DoTimedLedEffectActionGoal>) cl:&rest args)
  (cl:declare (cl:ignorable args))
  (cl:unless (cl:typep m 'DoTimedLedEffectActionGoal)
    (roslisp-msg-protocol:msg-deprecation-warning "using old message class name pal_device_msgs-msg:<DoTimedLedEffectActionGoal> is deprecated: use pal_device_msgs-msg:DoTimedLedEffectActionGoal instead.")))

(cl:ensure-generic-function 'header-val :lambda-list '(m))
(cl:defmethod header-val ((m <DoTimedLedEffectActionGoal>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader pal_device_msgs-msg:header-val is deprecated.  Use pal_device_msgs-msg:header instead.")
  (header m))

(cl:ensure-generic-function 'goal_id-val :lambda-list '(m))
(cl:defmethod goal_id-val ((m <DoTimedLedEffectActionGoal>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader pal_device_msgs-msg:goal_id-val is deprecated.  Use pal_device_msgs-msg:goal_id instead.")
  (goal_id m))

(cl:ensure-generic-function 'goal-val :lambda-list '(m))
(cl:defmethod goal-val ((m <DoTimedLedEffectActionGoal>))
  (roslisp-msg-protocol:msg-deprecation-warning "Using old-style slot reader pal_device_msgs-msg:goal-val is deprecated.  Use pal_device_msgs-msg:goal instead.")
  (goal m))
(cl:defmethod roslisp-msg-protocol:serialize ((msg <DoTimedLedEffectActionGoal>) ostream)
  "Serializes a message object of type '<DoTimedLedEffectActionGoal>"
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'header) ostream)
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'goal_id) ostream)
  (roslisp-msg-protocol:serialize (cl:slot-value msg 'goal) ostream)
)
(cl:defmethod roslisp-msg-protocol:deserialize ((msg <DoTimedLedEffectActionGoal>) istream)
  "Deserializes a message object of type '<DoTimedLedEffectActionGoal>"
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'header) istream)
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'goal_id) istream)
  (roslisp-msg-protocol:deserialize (cl:slot-value msg 'goal) istream)
  msg
)
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql '<DoTimedLedEffectActionGoal>)))
  "Returns string type for a message object of type '<DoTimedLedEffectActionGoal>"
  "pal_device_msgs/DoTimedLedEffectActionGoal")
(cl:defmethod roslisp-msg-protocol:ros-datatype ((msg (cl:eql 'DoTimedLedEffectActionGoal)))
  "Returns string type for a message object of type 'DoTimedLedEffectActionGoal"
  "pal_device_msgs/DoTimedLedEffectActionGoal")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql '<DoTimedLedEffectActionGoal>)))
  "Returns md5sum for a message object of type '<DoTimedLedEffectActionGoal>"
  "c967d8ff7a3d2fc9fa1fa55a3b65a68d")
(cl:defmethod roslisp-msg-protocol:md5sum ((type (cl:eql 'DoTimedLedEffectActionGoal)))
  "Returns md5sum for a message object of type 'DoTimedLedEffectActionGoal"
  "c967d8ff7a3d2fc9fa1fa55a3b65a68d")
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql '<DoTimedLedEffectActionGoal>)))
  "Returns full string definition for message of type '<DoTimedLedEffectActionGoal>"
  (cl:format cl:nil "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalID goal_id~%DoTimedLedEffectGoal goal~%~%================================================================================~%MSG: std_msgs/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')~%# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%string frame_id~%~%================================================================================~%MSG: actionlib_msgs/GoalID~%# The stamp should store the time at which this goal was requested.~%# It is used by an action server when it tries to preempt all~%# goals that were requested before a certain time~%time stamp~%~%# The id provides a way to associate feedback and~%# result message with specific goal requests. The id~%# specified must be unique.~%string id~%~%~%================================================================================~%MSG: pal_device_msgs/DoTimedLedEffectGoal~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%#uint16 because uint8 is char[] in Python~%uint32[] devices~%~%#Contains parameters for all led effects, but only the selected effect type parameters shall be provided~%LedEffectParams params~%#Duration of the effect, when the time is over the previous effect will be restored. 0 will make it display forever~%duration effectDuration~%~%#priority of the effect, 0 is no priority, 255 is max priority~%uint8 priority~%~%================================================================================~%MSG: pal_device_msgs/LedEffectParams~%uint8 FIXED_COLOR=0~%uint8 RAINBOW=1~%uint8 FADE=2~%uint8 BLINK=3~%uint8 PROGRESS=4~%uint8 FLOW=5~%uint8 PREPROGRAMMED_EFFECT=6~%uint8 EFFECT_VIA_TOPIC=7~%uint8 DATA_ARRAY=8~%~%uint8 effectType~%~%# RGBA of color, alpha will be used as intensity if supported by the led~%pal_device_msgs/LedFixedColorParams fixed_color~%pal_device_msgs/LedRainbowParams rainbow~%pal_device_msgs/LedFadeParams fade~%pal_device_msgs/LedBlinkParams blink~%pal_device_msgs/LedProgressParams progress~%pal_device_msgs/LedFlowParams flow~%#Below are device specific, avoid them if you can~%pal_device_msgs/LedPreProgrammedParams preprogrammed~%pal_device_msgs/LedEffectViaTopicParams effect_via_topic~%pal_device_msgs/LedDataArrayParams data_array~%~%================================================================================~%MSG: pal_device_msgs/LedFixedColorParams~%# RGBA of color, alpha will be used as intensity if supported by the led~%std_msgs/ColorRGBA color~%~%================================================================================~%MSG: std_msgs/ColorRGBA~%float32 r~%float32 g~%float32 b~%float32 a~%~%================================================================================~%MSG: pal_device_msgs/LedRainbowParams~%# Time to perform rainbow~%duration transition_duration~%~%================================================================================~%MSG: pal_device_msgs/LedFadeParams~%# RGBA of color, alpha will be used as intensity if supported by the led~%std_msgs/ColorRGBA first_color~%std_msgs/ColorRGBA second_color~%~%#Duration of the transition from one color to the other~%duration transition_duration~%~%#Perform a fade when going from secondColor to firstColor~%bool reverse_fade~%~%~%================================================================================~%MSG: pal_device_msgs/LedBlinkParams~%# RGBA of color, alpha will be used as intensity if supported by the led~%std_msgs/ColorRGBA first_color~%std_msgs/ColorRGBA second_color~%~%duration first_color_duration~%duration second_color_duration~%~%~%================================================================================~%MSG: pal_device_msgs/LedProgressParams~%# RGBA of color, alpha will be used as intensity if supported by the led~%std_msgs/ColorRGBA first_color~%std_msgs/ColorRGBA second_color~%~%#Percentage of pixels painted with the first color~%float32 percentage~%#Offset to begin painting the first color~%float32 led_offset ~%~%~%================================================================================~%MSG: pal_device_msgs/LedFlowParams~%# RGBA of color, alpha will be used as intensity if supported by the led~%std_msgs/ColorRGBA first_color~%std_msgs/ColorRGBA second_color~%~%# Percentage of pixels painted with the first color~%float32 percentage~%# Flow velocity~%float32 velocity~%~%~%================================================================================~%MSG: pal_device_msgs/LedPreProgrammedParams~%#Id of pre-programmed effect, most likely device specific~%uint8 preprogrammed_id~%~%================================================================================~%MSG: pal_device_msgs/LedEffectViaTopicParams~%#Topic name, must be of type pal_device_msgs/LedDataArray~%string topic_name~%~%================================================================================~%MSG: pal_device_msgs/LedDataArrayParams~%#Data of the effect, each element in the array represents a led, ~%#length should match device led count~%#For devices with no RGB option, just the alpha channel will be used~%std_msgs/ColorRGBA[] data~%~%~%"))
(cl:defmethod roslisp-msg-protocol:message-definition ((type (cl:eql 'DoTimedLedEffectActionGoal)))
  "Returns full string definition for message of type 'DoTimedLedEffectActionGoal"
  (cl:format cl:nil "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%~%Header header~%actionlib_msgs/GoalID goal_id~%DoTimedLedEffectGoal goal~%~%================================================================================~%MSG: std_msgs/Header~%# Standard metadata for higher-level stamped data types.~%# This is generally used to communicate timestamped data ~%# in a particular coordinate frame.~%# ~%# sequence ID: consecutively increasing ID ~%uint32 seq~%#Two-integer timestamp that is expressed as:~%# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')~%# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')~%# time-handling sugar is provided by the client library~%time stamp~%#Frame this data is associated with~%string frame_id~%~%================================================================================~%MSG: actionlib_msgs/GoalID~%# The stamp should store the time at which this goal was requested.~%# It is used by an action server when it tries to preempt all~%# goals that were requested before a certain time~%time stamp~%~%# The id provides a way to associate feedback and~%# result message with specific goal requests. The id~%# specified must be unique.~%string id~%~%~%================================================================================~%MSG: pal_device_msgs/DoTimedLedEffectGoal~%# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======~%#uint16 because uint8 is char[] in Python~%uint32[] devices~%~%#Contains parameters for all led effects, but only the selected effect type parameters shall be provided~%LedEffectParams params~%#Duration of the effect, when the time is over the previous effect will be restored. 0 will make it display forever~%duration effectDuration~%~%#priority of the effect, 0 is no priority, 255 is max priority~%uint8 priority~%~%================================================================================~%MSG: pal_device_msgs/LedEffectParams~%uint8 FIXED_COLOR=0~%uint8 RAINBOW=1~%uint8 FADE=2~%uint8 BLINK=3~%uint8 PROGRESS=4~%uint8 FLOW=5~%uint8 PREPROGRAMMED_EFFECT=6~%uint8 EFFECT_VIA_TOPIC=7~%uint8 DATA_ARRAY=8~%~%uint8 effectType~%~%# RGBA of color, alpha will be used as intensity if supported by the led~%pal_device_msgs/LedFixedColorParams fixed_color~%pal_device_msgs/LedRainbowParams rainbow~%pal_device_msgs/LedFadeParams fade~%pal_device_msgs/LedBlinkParams blink~%pal_device_msgs/LedProgressParams progress~%pal_device_msgs/LedFlowParams flow~%#Below are device specific, avoid them if you can~%pal_device_msgs/LedPreProgrammedParams preprogrammed~%pal_device_msgs/LedEffectViaTopicParams effect_via_topic~%pal_device_msgs/LedDataArrayParams data_array~%~%================================================================================~%MSG: pal_device_msgs/LedFixedColorParams~%# RGBA of color, alpha will be used as intensity if supported by the led~%std_msgs/ColorRGBA color~%~%================================================================================~%MSG: std_msgs/ColorRGBA~%float32 r~%float32 g~%float32 b~%float32 a~%~%================================================================================~%MSG: pal_device_msgs/LedRainbowParams~%# Time to perform rainbow~%duration transition_duration~%~%================================================================================~%MSG: pal_device_msgs/LedFadeParams~%# RGBA of color, alpha will be used as intensity if supported by the led~%std_msgs/ColorRGBA first_color~%std_msgs/ColorRGBA second_color~%~%#Duration of the transition from one color to the other~%duration transition_duration~%~%#Perform a fade when going from secondColor to firstColor~%bool reverse_fade~%~%~%================================================================================~%MSG: pal_device_msgs/LedBlinkParams~%# RGBA of color, alpha will be used as intensity if supported by the led~%std_msgs/ColorRGBA first_color~%std_msgs/ColorRGBA second_color~%~%duration first_color_duration~%duration second_color_duration~%~%~%================================================================================~%MSG: pal_device_msgs/LedProgressParams~%# RGBA of color, alpha will be used as intensity if supported by the led~%std_msgs/ColorRGBA first_color~%std_msgs/ColorRGBA second_color~%~%#Percentage of pixels painted with the first color~%float32 percentage~%#Offset to begin painting the first color~%float32 led_offset ~%~%~%================================================================================~%MSG: pal_device_msgs/LedFlowParams~%# RGBA of color, alpha will be used as intensity if supported by the led~%std_msgs/ColorRGBA first_color~%std_msgs/ColorRGBA second_color~%~%# Percentage of pixels painted with the first color~%float32 percentage~%# Flow velocity~%float32 velocity~%~%~%================================================================================~%MSG: pal_device_msgs/LedPreProgrammedParams~%#Id of pre-programmed effect, most likely device specific~%uint8 preprogrammed_id~%~%================================================================================~%MSG: pal_device_msgs/LedEffectViaTopicParams~%#Topic name, must be of type pal_device_msgs/LedDataArray~%string topic_name~%~%================================================================================~%MSG: pal_device_msgs/LedDataArrayParams~%#Data of the effect, each element in the array represents a led, ~%#length should match device led count~%#For devices with no RGB option, just the alpha channel will be used~%std_msgs/ColorRGBA[] data~%~%~%"))
(cl:defmethod roslisp-msg-protocol:serialization-length ((msg <DoTimedLedEffectActionGoal>))
  (cl:+ 0
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'header))
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'goal_id))
     (roslisp-msg-protocol:serialization-length (cl:slot-value msg 'goal))
))
(cl:defmethod roslisp-msg-protocol:ros-message-to-list ((msg <DoTimedLedEffectActionGoal>))
  "Converts a ROS message object to a list"
  (cl:list 'DoTimedLedEffectActionGoal
    (cl:cons ':header (header msg))
    (cl:cons ':goal_id (goal_id msg))
    (cl:cons ':goal (goal msg))
))
