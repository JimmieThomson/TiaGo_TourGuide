// Auto-generated. Do not edit!

// (in-package pal_interaction_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class SoundGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.text = null;
      this.lang_id = null;
      this.wait_before_speaking = null;
    }
    else {
      if (initObj.hasOwnProperty('text')) {
        this.text = initObj.text
      }
      else {
        this.text = '';
      }
      if (initObj.hasOwnProperty('lang_id')) {
        this.lang_id = initObj.lang_id
      }
      else {
        this.lang_id = '';
      }
      if (initObj.hasOwnProperty('wait_before_speaking')) {
        this.wait_before_speaking = initObj.wait_before_speaking
      }
      else {
        this.wait_before_speaking = {secs: 0, nsecs: 0};
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type SoundGoal
    // Serialize message field [text]
    bufferOffset = _serializer.string(obj.text, buffer, bufferOffset);
    // Serialize message field [lang_id]
    bufferOffset = _serializer.string(obj.lang_id, buffer, bufferOffset);
    // Serialize message field [wait_before_speaking]
    bufferOffset = _serializer.duration(obj.wait_before_speaking, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type SoundGoal
    let len;
    let data = new SoundGoal(null);
    // Deserialize message field [text]
    data.text = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [lang_id]
    data.lang_id = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [wait_before_speaking]
    data.wait_before_speaking = _deserializer.duration(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += _getByteLength(object.text);
    length += _getByteLength(object.lang_id);
    return length + 16;
  }

  static datatype() {
    // Returns string type for a message object
    return 'pal_interaction_msgs/SoundGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return 'a885e729fbf7cd3a957b93630532e7bf';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    ## .................
    ## DEPRECATED
    ## Please do not use this action as will be removed in the future.
    ## i18ntext.action together with pal_tts_cfg pkg is recomended instead.
    ## ---------------------------------------------------------------------
     
    ## goal definition
    # Text to be spoken
    string text
    # Language of the given text in
    # variable text.
    # If empty the system will try to speak it in 
    # the current system language that can be changed
    # in wReemCommmander.
    string lang_id
    # Time to wait before starting to say the 
    # given text. Default is zero.
    duration wait_before_speaking
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new SoundGoal(null);
    if (msg.text !== undefined) {
      resolved.text = msg.text;
    }
    else {
      resolved.text = ''
    }

    if (msg.lang_id !== undefined) {
      resolved.lang_id = msg.lang_id;
    }
    else {
      resolved.lang_id = ''
    }

    if (msg.wait_before_speaking !== undefined) {
      resolved.wait_before_speaking = msg.wait_before_speaking;
    }
    else {
      resolved.wait_before_speaking = {secs: 0, nsecs: 0}
    }

    return resolved;
    }
};

module.exports = SoundGoal;
