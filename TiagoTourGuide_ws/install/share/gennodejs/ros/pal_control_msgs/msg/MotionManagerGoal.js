// Auto-generated. Do not edit!

// (in-package pal_control_msgs.msg)


"use strict";

const _serializer = _ros_msg_utils.Serialize;
const _arraySerializer = _serializer.Array;
const _deserializer = _ros_msg_utils.Deserialize;
const _arrayDeserializer = _deserializer.Array;
const _finder = _ros_msg_utils.Find;
const _getByteLength = _ros_msg_utils.getByteLength;

//-----------------------------------------------------------

class MotionManagerGoal {
  constructor(initObj={}) {
    if (initObj === null) {
      // initObj === null is a special case for deserialization where we don't initialize fields
      this.filename = null;
      this.plan = null;
      this.checkSafety = null;
      this.repeat = null;
      this.priority = null;
      this.queueTimeout = null;
    }
    else {
      if (initObj.hasOwnProperty('filename')) {
        this.filename = initObj.filename
      }
      else {
        this.filename = '';
      }
      if (initObj.hasOwnProperty('plan')) {
        this.plan = initObj.plan
      }
      else {
        this.plan = false;
      }
      if (initObj.hasOwnProperty('checkSafety')) {
        this.checkSafety = initObj.checkSafety
      }
      else {
        this.checkSafety = false;
      }
      if (initObj.hasOwnProperty('repeat')) {
        this.repeat = initObj.repeat
      }
      else {
        this.repeat = false;
      }
      if (initObj.hasOwnProperty('priority')) {
        this.priority = initObj.priority
      }
      else {
        this.priority = 0;
      }
      if (initObj.hasOwnProperty('queueTimeout')) {
        this.queueTimeout = initObj.queueTimeout
      }
      else {
        this.queueTimeout = 0;
      }
    }
  }

  static serialize(obj, buffer, bufferOffset) {
    // Serializes a message object of type MotionManagerGoal
    // Serialize message field [filename]
    bufferOffset = _serializer.string(obj.filename, buffer, bufferOffset);
    // Serialize message field [plan]
    bufferOffset = _serializer.bool(obj.plan, buffer, bufferOffset);
    // Serialize message field [checkSafety]
    bufferOffset = _serializer.bool(obj.checkSafety, buffer, bufferOffset);
    // Serialize message field [repeat]
    bufferOffset = _serializer.bool(obj.repeat, buffer, bufferOffset);
    // Serialize message field [priority]
    bufferOffset = _serializer.uint8(obj.priority, buffer, bufferOffset);
    // Serialize message field [queueTimeout]
    bufferOffset = _serializer.int32(obj.queueTimeout, buffer, bufferOffset);
    return bufferOffset;
  }

  static deserialize(buffer, bufferOffset=[0]) {
    //deserializes a message object of type MotionManagerGoal
    let len;
    let data = new MotionManagerGoal(null);
    // Deserialize message field [filename]
    data.filename = _deserializer.string(buffer, bufferOffset);
    // Deserialize message field [plan]
    data.plan = _deserializer.bool(buffer, bufferOffset);
    // Deserialize message field [checkSafety]
    data.checkSafety = _deserializer.bool(buffer, bufferOffset);
    // Deserialize message field [repeat]
    data.repeat = _deserializer.bool(buffer, bufferOffset);
    // Deserialize message field [priority]
    data.priority = _deserializer.uint8(buffer, bufferOffset);
    // Deserialize message field [queueTimeout]
    data.queueTimeout = _deserializer.int32(buffer, bufferOffset);
    return data;
  }

  static getMessageSize(object) {
    let length = 0;
    length += _getByteLength(object.filename);
    return length + 12;
  }

  static datatype() {
    // Returns string type for a message object
    return 'pal_control_msgs/MotionManagerGoal';
  }

  static md5sum() {
    //Returns md5sum for a message object
    return '6cfa0989c229a7ae793c273afdc78ead';
  }

  static messageDefinition() {
    // Returns full string definition for message
    return `
    # ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
    # Path to XML file containing motions for the robot
    string filename
    
    # True if a collision-free approach motion and trajectory validation are to be performed.
    # If set to true but an approach motion is not required, it will not be computed.
    bool plan
    
    #True if safety around the robot must be checked using sensors such as the sonars and lasers
    bool checkSafety
    
    #True if the motion must be repeated until a new goal has been received
    bool repeat
    
    #priority of the motion, 0 is no priority, 100 is max priority
    uint8 priority
    
    #Specifies how long in miliseconds should the goal wait before forcing an execution. If a movement is being executed when the goal is received, it will wait the specified time or until the movement finishes to execute it.
    # -1 Means wait forever until the previous movement has finished
    int32 queueTimeout 
    
    
    `;
  }

  static Resolve(msg) {
    // deep-construct a valid message object instance of whatever was passed in
    if (typeof msg !== 'object' || msg === null) {
      msg = {};
    }
    const resolved = new MotionManagerGoal(null);
    if (msg.filename !== undefined) {
      resolved.filename = msg.filename;
    }
    else {
      resolved.filename = ''
    }

    if (msg.plan !== undefined) {
      resolved.plan = msg.plan;
    }
    else {
      resolved.plan = false
    }

    if (msg.checkSafety !== undefined) {
      resolved.checkSafety = msg.checkSafety;
    }
    else {
      resolved.checkSafety = false
    }

    if (msg.repeat !== undefined) {
      resolved.repeat = msg.repeat;
    }
    else {
      resolved.repeat = false
    }

    if (msg.priority !== undefined) {
      resolved.priority = msg.priority;
    }
    else {
      resolved.priority = 0
    }

    if (msg.queueTimeout !== undefined) {
      resolved.queueTimeout = msg.queueTimeout;
    }
    else {
      resolved.queueTimeout = 0
    }

    return resolved;
    }
};

module.exports = MotionManagerGoal;
