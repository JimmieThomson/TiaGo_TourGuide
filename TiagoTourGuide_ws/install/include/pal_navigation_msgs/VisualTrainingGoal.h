// Generated by gencpp from file pal_navigation_msgs/VisualTrainingGoal.msg
// DO NOT EDIT!


#ifndef PAL_NAVIGATION_MSGS_MESSAGE_VISUALTRAININGGOAL_H
#define PAL_NAVIGATION_MSGS_MESSAGE_VISUALTRAININGGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace pal_navigation_msgs
{
template <class ContainerAllocator>
struct VisualTrainingGoal_
{
  typedef VisualTrainingGoal_<ContainerAllocator> Type;

  VisualTrainingGoal_()
    : action(0)
    , database_path()  {
    }
  VisualTrainingGoal_(const ContainerAllocator& _alloc)
    : action(0)
    , database_path(_alloc)  {
  (void)_alloc;
    }



   typedef uint8_t _action_type;
  _action_type action;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _database_path_type;
  _database_path_type database_path;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(ACTION_TRAIN)
  #undef ACTION_TRAIN
#endif

  enum {
    ACTION_TRAIN = 0u,
  };


  typedef boost::shared_ptr< ::pal_navigation_msgs::VisualTrainingGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pal_navigation_msgs::VisualTrainingGoal_<ContainerAllocator> const> ConstPtr;

}; // struct VisualTrainingGoal_

typedef ::pal_navigation_msgs::VisualTrainingGoal_<std::allocator<void> > VisualTrainingGoal;

typedef boost::shared_ptr< ::pal_navigation_msgs::VisualTrainingGoal > VisualTrainingGoalPtr;
typedef boost::shared_ptr< ::pal_navigation_msgs::VisualTrainingGoal const> VisualTrainingGoalConstPtr;

// constants requiring out of line definition

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pal_navigation_msgs::VisualTrainingGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pal_navigation_msgs::VisualTrainingGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pal_navigation_msgs::VisualTrainingGoal_<ContainerAllocator1> & lhs, const ::pal_navigation_msgs::VisualTrainingGoal_<ContainerAllocator2> & rhs)
{
  return lhs.action == rhs.action &&
    lhs.database_path == rhs.database_path;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pal_navigation_msgs::VisualTrainingGoal_<ContainerAllocator1> & lhs, const ::pal_navigation_msgs::VisualTrainingGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pal_navigation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pal_navigation_msgs::VisualTrainingGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pal_navigation_msgs::VisualTrainingGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_navigation_msgs::VisualTrainingGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_navigation_msgs::VisualTrainingGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_navigation_msgs::VisualTrainingGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_navigation_msgs::VisualTrainingGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pal_navigation_msgs::VisualTrainingGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "1e49c4ac5474f4adebb02c2483518127";
  }

  static const char* value(const ::pal_navigation_msgs::VisualTrainingGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x1e49c4ac5474f4adULL;
  static const uint64_t static_value2 = 0xebb02c2483518127ULL;
};

template<class ContainerAllocator>
struct DataType< ::pal_navigation_msgs::VisualTrainingGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pal_navigation_msgs/VisualTrainingGoal";
  }

  static const char* value(const ::pal_navigation_msgs::VisualTrainingGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pal_navigation_msgs::VisualTrainingGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"#goal definition\n"
"uint8 ACTION_TRAIN=0\n"
"uint8 action\n"
"\n"
"# Output directory, for ACTION_TRAIN\n"
"string database_path\n"
;
  }

  static const char* value(const ::pal_navigation_msgs::VisualTrainingGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pal_navigation_msgs::VisualTrainingGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
      stream.next(m.database_path);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct VisualTrainingGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pal_navigation_msgs::VisualTrainingGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pal_navigation_msgs::VisualTrainingGoal_<ContainerAllocator>& v)
  {
    s << indent << "action: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.action);
    s << indent << "database_path: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.database_path);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PAL_NAVIGATION_MSGS_MESSAGE_VISUALTRAININGGOAL_H
