// Generated by gencpp from file pal_navigation_msgs/FollowWaypointsGoal.msg
// DO NOT EDIT!


#ifndef PAL_NAVIGATION_MSGS_MESSAGE_FOLLOWWAYPOINTSGOAL_H
#define PAL_NAVIGATION_MSGS_MESSAGE_FOLLOWWAYPOINTSGOAL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <pal_navigation_msgs/Waypoint.h>

namespace pal_navigation_msgs
{
template <class ContainerAllocator>
struct FollowWaypointsGoal_
{
  typedef FollowWaypointsGoal_<ContainerAllocator> Type;

  FollowWaypointsGoal_()
    : goal_index(0)
    , number_of_loops(0)
    , bt_model_name()
    , poses()  {
    }
  FollowWaypointsGoal_(const ContainerAllocator& _alloc)
    : goal_index(0)
    , number_of_loops(0)
    , bt_model_name(_alloc)
    , poses(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _goal_index_type;
  _goal_index_type goal_index;

   typedef uint32_t _number_of_loops_type;
  _number_of_loops_type number_of_loops;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _bt_model_name_type;
  _bt_model_name_type bt_model_name;

   typedef std::vector< ::pal_navigation_msgs::Waypoint_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::pal_navigation_msgs::Waypoint_<ContainerAllocator> >> _poses_type;
  _poses_type poses;



// reducing the odds to have name collisions with Windows.h 
#if defined(_WIN32) && defined(NONE)
  #undef NONE
#endif
#if defined(_WIN32) && defined(UNKNOWN)
  #undef UNKNOWN
#endif
#if defined(_WIN32) && defined(TASK_EXECUTOR_FAILED)
  #undef TASK_EXECUTOR_FAILED
#endif

  enum {
    NONE = 0u,
    UNKNOWN = 600u,
    TASK_EXECUTOR_FAILED = 601u,
  };


  typedef boost::shared_ptr< ::pal_navigation_msgs::FollowWaypointsGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::pal_navigation_msgs::FollowWaypointsGoal_<ContainerAllocator> const> ConstPtr;

}; // struct FollowWaypointsGoal_

typedef ::pal_navigation_msgs::FollowWaypointsGoal_<std::allocator<void> > FollowWaypointsGoal;

typedef boost::shared_ptr< ::pal_navigation_msgs::FollowWaypointsGoal > FollowWaypointsGoalPtr;
typedef boost::shared_ptr< ::pal_navigation_msgs::FollowWaypointsGoal const> FollowWaypointsGoalConstPtr;

// constants requiring out of line definition

   

   

   



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::pal_navigation_msgs::FollowWaypointsGoal_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::pal_navigation_msgs::FollowWaypointsGoal_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::pal_navigation_msgs::FollowWaypointsGoal_<ContainerAllocator1> & lhs, const ::pal_navigation_msgs::FollowWaypointsGoal_<ContainerAllocator2> & rhs)
{
  return lhs.goal_index == rhs.goal_index &&
    lhs.number_of_loops == rhs.number_of_loops &&
    lhs.bt_model_name == rhs.bt_model_name &&
    lhs.poses == rhs.poses;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::pal_navigation_msgs::FollowWaypointsGoal_<ContainerAllocator1> & lhs, const ::pal_navigation_msgs::FollowWaypointsGoal_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace pal_navigation_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::pal_navigation_msgs::FollowWaypointsGoal_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::pal_navigation_msgs::FollowWaypointsGoal_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_navigation_msgs::FollowWaypointsGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::pal_navigation_msgs::FollowWaypointsGoal_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_navigation_msgs::FollowWaypointsGoal_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::pal_navigation_msgs::FollowWaypointsGoal_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::pal_navigation_msgs::FollowWaypointsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "6ac0bba57c7ff0865644730bc6d43f52";
  }

  static const char* value(const ::pal_navigation_msgs::FollowWaypointsGoal_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x6ac0bba57c7ff086ULL;
  static const uint64_t static_value2 = 0x5644730bc6d43f52ULL;
};

template<class ContainerAllocator>
struct DataType< ::pal_navigation_msgs::FollowWaypointsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "pal_navigation_msgs/FollowWaypointsGoal";
  }

  static const char* value(const ::pal_navigation_msgs::FollowWaypointsGoal_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::pal_navigation_msgs::FollowWaypointsGoal_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n"
"# Error codes\n"
"# Note: The expected priority order of the errors should match the message order\n"
"uint32 NONE=0\n"
"uint32 UNKNOWN=600\n"
"uint32 TASK_EXECUTOR_FAILED=601\n"
"\n"
"#goal definition\n"
"uint32 goal_index\n"
"uint32 number_of_loops\n"
"string bt_model_name\n"
"pal_navigation_msgs/Waypoint[] poses\n"
"\n"
"================================================================================\n"
"MSG: pal_navigation_msgs/Waypoint\n"
"# Error codes\n"
"# Note: The expected priority order of the errors should match the message order\n"
"uint32 NOTHING=0\n"
"uint32 WAIT=1\n"
"uint32 ROTATE=2\n"
"uint32 DOCK=3\n"
"uint32 UNDOCK=4\n"
"\n"
"uint32[] actions\n"
"geometry_msgs/PoseStamped pose\n"
"================================================================================\n"
"MSG: geometry_msgs/PoseStamped\n"
"# A Pose with reference coordinate frame and timestamp\n"
"Header header\n"
"Pose pose\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
;
  }

  static const char* value(const ::pal_navigation_msgs::FollowWaypointsGoal_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::pal_navigation_msgs::FollowWaypointsGoal_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goal_index);
      stream.next(m.number_of_loops);
      stream.next(m.bt_model_name);
      stream.next(m.poses);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FollowWaypointsGoal_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::pal_navigation_msgs::FollowWaypointsGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::pal_navigation_msgs::FollowWaypointsGoal_<ContainerAllocator>& v)
  {
    s << indent << "goal_index: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.goal_index);
    s << indent << "number_of_loops: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.number_of_loops);
    s << indent << "bt_model_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.bt_model_name);
    s << indent << "poses[]" << std::endl;
    for (size_t i = 0; i < v.poses.size(); ++i)
    {
      s << indent << "  poses[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::pal_navigation_msgs::Waypoint_<ContainerAllocator> >::stream(s, indent + "    ", v.poses[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PAL_NAVIGATION_MSGS_MESSAGE_FOLLOWWAYPOINTSGOAL_H
