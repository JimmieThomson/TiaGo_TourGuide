# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pal_device_msgs/LedBlinkParams.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import genpy
import std_msgs.msg

class LedBlinkParams(genpy.Message):
  _md5sum = "0b26c0fa483854105ff61f62de102ca5"
  _type = "pal_device_msgs/LedBlinkParams"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# RGBA of color, alpha will be used as intensity if supported by the led
std_msgs/ColorRGBA first_color
std_msgs/ColorRGBA second_color

duration first_color_duration
duration second_color_duration


================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a
"""
  __slots__ = ['first_color','second_color','first_color_duration','second_color_duration']
  _slot_types = ['std_msgs/ColorRGBA','std_msgs/ColorRGBA','duration','duration']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       first_color,second_color,first_color_duration,second_color_duration

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(LedBlinkParams, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.first_color is None:
        self.first_color = std_msgs.msg.ColorRGBA()
      if self.second_color is None:
        self.second_color = std_msgs.msg.ColorRGBA()
      if self.first_color_duration is None:
        self.first_color_duration = genpy.Duration()
      if self.second_color_duration is None:
        self.second_color_duration = genpy.Duration()
    else:
      self.first_color = std_msgs.msg.ColorRGBA()
      self.second_color = std_msgs.msg.ColorRGBA()
      self.first_color_duration = genpy.Duration()
      self.second_color_duration = genpy.Duration()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_8f4i().pack(_x.first_color.r, _x.first_color.g, _x.first_color.b, _x.first_color.a, _x.second_color.r, _x.second_color.g, _x.second_color.b, _x.second_color.a, _x.first_color_duration.secs, _x.first_color_duration.nsecs, _x.second_color_duration.secs, _x.second_color_duration.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.first_color is None:
        self.first_color = std_msgs.msg.ColorRGBA()
      if self.second_color is None:
        self.second_color = std_msgs.msg.ColorRGBA()
      if self.first_color_duration is None:
        self.first_color_duration = genpy.Duration()
      if self.second_color_duration is None:
        self.second_color_duration = genpy.Duration()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.first_color.r, _x.first_color.g, _x.first_color.b, _x.first_color.a, _x.second_color.r, _x.second_color.g, _x.second_color.b, _x.second_color.a, _x.first_color_duration.secs, _x.first_color_duration.nsecs, _x.second_color_duration.secs, _x.second_color_duration.nsecs,) = _get_struct_8f4i().unpack(str[start:end])
      self.first_color_duration.canon()
      self.second_color_duration.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_8f4i().pack(_x.first_color.r, _x.first_color.g, _x.first_color.b, _x.first_color.a, _x.second_color.r, _x.second_color.g, _x.second_color.b, _x.second_color.a, _x.first_color_duration.secs, _x.first_color_duration.nsecs, _x.second_color_duration.secs, _x.second_color_duration.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.first_color is None:
        self.first_color = std_msgs.msg.ColorRGBA()
      if self.second_color is None:
        self.second_color = std_msgs.msg.ColorRGBA()
      if self.first_color_duration is None:
        self.first_color_duration = genpy.Duration()
      if self.second_color_duration is None:
        self.second_color_duration = genpy.Duration()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.first_color.r, _x.first_color.g, _x.first_color.b, _x.first_color.a, _x.second_color.r, _x.second_color.g, _x.second_color.b, _x.second_color.a, _x.first_color_duration.secs, _x.first_color_duration.nsecs, _x.second_color_duration.secs, _x.second_color_duration.nsecs,) = _get_struct_8f4i().unpack(str[start:end])
      self.first_color_duration.canon()
      self.second_color_duration.canon()
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_8f4i = None
def _get_struct_8f4i():
    global _struct_8f4i
    if _struct_8f4i is None:
        _struct_8f4i = struct.Struct("<8f4i")
    return _struct_8f4i
