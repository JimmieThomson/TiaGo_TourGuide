# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pal_vision_msgs/FaceDetection.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import pal_vision_msgs.msg

class FaceDetection(genpy.Message):
  _md5sum = "bf1d543fd0ed58f92521046e9c5f942a"
  _type = "pal_vision_msgs/FaceDetection"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """## Contains data relative to the detection of the face of a person

geometry_msgs/Point        position3D         # 3D position of the person face projected on the ground plane, expressed in the robot frame /base_link
pal_vision_msgs/Rectangle  imageBoundingBox   # bounding box of the face in the image
float32[]                  hog                # HOG descriptor of the face





================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: pal_vision_msgs/Rectangle
## Rectangle defined by a point, its width and height
# corresponds to the openCV struct : CvRect

# coordinates of the top left corner of the box
int64 x
int64 y

# wigth of the box
int64 width

# height of the box
int64 height
"""
  __slots__ = ['position3D','imageBoundingBox','hog']
  _slot_types = ['geometry_msgs/Point','pal_vision_msgs/Rectangle','float32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       position3D,imageBoundingBox,hog

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(FaceDetection, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.position3D is None:
        self.position3D = geometry_msgs.msg.Point()
      if self.imageBoundingBox is None:
        self.imageBoundingBox = pal_vision_msgs.msg.Rectangle()
      if self.hog is None:
        self.hog = []
    else:
      self.position3D = geometry_msgs.msg.Point()
      self.imageBoundingBox = pal_vision_msgs.msg.Rectangle()
      self.hog = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3d4q().pack(_x.position3D.x, _x.position3D.y, _x.position3D.z, _x.imageBoundingBox.x, _x.imageBoundingBox.y, _x.imageBoundingBox.width, _x.imageBoundingBox.height))
      length = len(self.hog)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(struct.Struct(pattern).pack(*self.hog))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position3D is None:
        self.position3D = geometry_msgs.msg.Point()
      if self.imageBoundingBox is None:
        self.imageBoundingBox = pal_vision_msgs.msg.Rectangle()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.position3D.x, _x.position3D.y, _x.position3D.z, _x.imageBoundingBox.x, _x.imageBoundingBox.y, _x.imageBoundingBox.width, _x.imageBoundingBox.height,) = _get_struct_3d4q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.hog = s.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3d4q().pack(_x.position3D.x, _x.position3D.y, _x.position3D.z, _x.imageBoundingBox.x, _x.imageBoundingBox.y, _x.imageBoundingBox.width, _x.imageBoundingBox.height))
      length = len(self.hog)
      buff.write(_struct_I.pack(length))
      pattern = '<%sf'%length
      buff.write(self.hog.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.position3D is None:
        self.position3D = geometry_msgs.msg.Point()
      if self.imageBoundingBox is None:
        self.imageBoundingBox = pal_vision_msgs.msg.Rectangle()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.position3D.x, _x.position3D.y, _x.position3D.z, _x.imageBoundingBox.x, _x.imageBoundingBox.y, _x.imageBoundingBox.width, _x.imageBoundingBox.height,) = _get_struct_3d4q().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sf'%length
      start = end
      s = struct.Struct(pattern)
      end += s.size
      self.hog = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3d4q = None
def _get_struct_3d4q():
    global _struct_3d4q
    if _struct_3d4q is None:
        _struct_3d4q = struct.Struct("<3d4q")
    return _struct_3d4q
