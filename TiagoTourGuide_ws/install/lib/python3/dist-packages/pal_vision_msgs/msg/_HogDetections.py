# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pal_vision_msgs/HogDetections.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import pal_vision_msgs.msg
import std_msgs.msg

class HogDetections(genpy.Message):
  _md5sum = "6a2b9c8c4c785ae7eec19468d16ba3c8"
  _type = "pal_vision_msgs/HogDetections"
  _has_header = True  # flag to mark the presence of a Header object
  _full_text = """## Contains data relative to the detection of person in an image using the HOG descriptor

Header header

uint32                           imgID    #image sequence ID in which the faces have been detected. Images are published in /person/image
pal_vision_msgs/HogDetection[]   persons  #vector of HOG detections



================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
string frame_id

================================================================================
MSG: pal_vision_msgs/HogDetection
## Contains data relative to the detection of a person using the HOG descriptor

pal_vision_msgs/Rectangle  imageBoundingBox         # bounding box of image region in which the person has been detected
geometry_msgs/Vector3      direction                # unitary vector expressing in what direction wrt the robot base frame the person is
float32[]                  hog                      # HOG descriptor of the person region
std_msgs/ColorRGBA         principalEigenVectorRGB  # Eigen vector (remember this is an unitary vector) corresponding to the maximum eigen value of all the RGB values in the person region. 
std_msgs/ColorRGBA[]       rgbClusterCenters        # RGB cluster centers of the person region in the image obtained using k-means. The rgb components are expressed in [0..1]
uint32[]                   rgbDescriptor1           # Descriptor based on binarized RGB gradients between adjacent image blocks (version 1)
uint32[]                   rgbDescriptor2           # Descriptor based on binarized RGB gradients between adjacent image blocks (version 2)




================================================================================
MSG: pal_vision_msgs/Rectangle
## Rectangle defined by a point, its width and height
# corresponds to the openCV struct : CvRect

# coordinates of the top left corner of the box
int64 x
int64 y

# wigth of the box
int64 width

# height of the box
int64 height

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: std_msgs/ColorRGBA
float32 r
float32 g
float32 b
float32 a
"""
  __slots__ = ['header','imgID','persons']
  _slot_types = ['std_msgs/Header','uint32','pal_vision_msgs/HogDetection[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       header,imgID,persons

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(HogDetections, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.imgID is None:
        self.imgID = 0
      if self.persons is None:
        self.persons = []
    else:
      self.header = std_msgs.msg.Header()
      self.imgID = 0
      self.persons = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.imgID
      buff.write(_get_struct_I().pack(_x))
      length = len(self.persons)
      buff.write(_struct_I.pack(length))
      for val1 in self.persons:
        _v1 = val1.imageBoundingBox
        _x = _v1
        buff.write(_get_struct_4q().pack(_x.x, _x.y, _x.width, _x.height))
        _v2 = val1.direction
        _x = _v2
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.hog)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(struct.Struct(pattern).pack(*val1.hog))
        _v3 = val1.principalEigenVectorRGB
        _x = _v3
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
        length = len(val1.rgbClusterCenters)
        buff.write(_struct_I.pack(length))
        for val2 in val1.rgbClusterCenters:
          _x = val2
          buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
        length = len(val1.rgbDescriptor1)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*val1.rgbDescriptor1))
        length = len(val1.rgbDescriptor2)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(struct.Struct(pattern).pack(*val1.rgbDescriptor2))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.persons is None:
        self.persons = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.imgID,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.persons = []
      for i in range(0, length):
        val1 = pal_vision_msgs.msg.HogDetection()
        _v4 = val1.imageBoundingBox
        _x = _v4
        start = end
        end += 32
        (_x.x, _x.y, _x.width, _x.height,) = _get_struct_4q().unpack(str[start:end])
        _v5 = val1.direction
        _x = _v5
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.hog = s.unpack(str[start:end])
        _v6 = val1.principalEigenVectorRGB
        _x = _v6
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.rgbClusterCenters = []
        for i in range(0, length):
          val2 = std_msgs.msg.ColorRGBA()
          _x = val2
          start = end
          end += 16
          (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
          val1.rgbClusterCenters.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.rgbDescriptor1 = s.unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.rgbDescriptor2 = s.unpack(str[start:end])
        self.persons.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3I().pack(_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs))
      _x = self.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
      _x = self.imgID
      buff.write(_get_struct_I().pack(_x))
      length = len(self.persons)
      buff.write(_struct_I.pack(length))
      for val1 in self.persons:
        _v7 = val1.imageBoundingBox
        _x = _v7
        buff.write(_get_struct_4q().pack(_x.x, _x.y, _x.width, _x.height))
        _v8 = val1.direction
        _x = _v8
        buff.write(_get_struct_3d().pack(_x.x, _x.y, _x.z))
        length = len(val1.hog)
        buff.write(_struct_I.pack(length))
        pattern = '<%sf'%length
        buff.write(val1.hog.tostring())
        _v9 = val1.principalEigenVectorRGB
        _x = _v9
        buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
        length = len(val1.rgbClusterCenters)
        buff.write(_struct_I.pack(length))
        for val2 in val1.rgbClusterCenters:
          _x = val2
          buff.write(_get_struct_4f().pack(_x.r, _x.g, _x.b, _x.a))
        length = len(val1.rgbDescriptor1)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(val1.rgbDescriptor1.tostring())
        length = len(val1.rgbDescriptor2)
        buff.write(_struct_I.pack(length))
        pattern = '<%sI'%length
        buff.write(val1.rgbDescriptor2.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.header is None:
        self.header = std_msgs.msg.Header()
      if self.persons is None:
        self.persons = None
      end = 0
      _x = self
      start = end
      end += 12
      (_x.header.seq, _x.header.stamp.secs, _x.header.stamp.nsecs,) = _get_struct_3I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.header.frame_id = str[start:end].decode('utf-8', 'rosmsg')
      else:
        self.header.frame_id = str[start:end]
      start = end
      end += 4
      (self.imgID,) = _get_struct_I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.persons = []
      for i in range(0, length):
        val1 = pal_vision_msgs.msg.HogDetection()
        _v10 = val1.imageBoundingBox
        _x = _v10
        start = end
        end += 32
        (_x.x, _x.y, _x.width, _x.height,) = _get_struct_4q().unpack(str[start:end])
        _v11 = val1.direction
        _x = _v11
        start = end
        end += 24
        (_x.x, _x.y, _x.z,) = _get_struct_3d().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sf'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.hog = numpy.frombuffer(str[start:end], dtype=numpy.float32, count=length)
        _v12 = val1.principalEigenVectorRGB
        _x = _v12
        start = end
        end += 16
        (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        val1.rgbClusterCenters = []
        for i in range(0, length):
          val2 = std_msgs.msg.ColorRGBA()
          _x = val2
          start = end
          end += 16
          (_x.r, _x.g, _x.b, _x.a,) = _get_struct_4f().unpack(str[start:end])
          val1.rgbClusterCenters.append(val2)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.rgbDescriptor1 = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sI'%length
        start = end
        s = struct.Struct(pattern)
        end += s.size
        val1.rgbDescriptor2 = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
        self.persons.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3I = None
def _get_struct_3I():
    global _struct_3I
    if _struct_3I is None:
        _struct_3I = struct.Struct("<3I")
    return _struct_3I
_struct_3d = None
def _get_struct_3d():
    global _struct_3d
    if _struct_3d is None:
        _struct_3d = struct.Struct("<3d")
    return _struct_3d
_struct_4f = None
def _get_struct_4f():
    global _struct_4f
    if _struct_4f is None:
        _struct_4f = struct.Struct("<4f")
    return _struct_4f
_struct_4q = None
def _get_struct_4q():
    global _struct_4q
    if _struct_4q is None:
        _struct_4q = struct.Struct("<4q")
    return _struct_4q
