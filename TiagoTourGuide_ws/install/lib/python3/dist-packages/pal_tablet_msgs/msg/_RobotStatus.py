# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from pal_tablet_msgs/RobotStatus.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import pal_tablet_msgs.msg
import std_msgs.msg

class RobotStatus(genpy.Message):
  _md5sum = "3495bf9d81b79deaa82f3652871818c5"
  _type = "pal_tablet_msgs/RobotStatus"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Robot status msgs for tablet

pal_tablet_msgs/FunctionalityStatus[] messages 

================================================================================
MSG: pal_tablet_msgs/FunctionalityStatus
# Functionality status message

std_msgs/String   errMessage
std_msgs/Bool     errStatus

================================================================================
MSG: std_msgs/String
string data

================================================================================
MSG: std_msgs/Bool
bool data"""
  __slots__ = ['messages']
  _slot_types = ['pal_tablet_msgs/FunctionalityStatus[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       messages

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(RobotStatus, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.messages is None:
        self.messages = []
    else:
      self.messages = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      length = len(self.messages)
      buff.write(_struct_I.pack(length))
      for val1 in self.messages:
        _v1 = val1.errMessage
        _x = _v1.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v2 = val1.errStatus
        _x = _v2.data
        buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.messages is None:
        self.messages = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.messages = []
      for i in range(0, length):
        val1 = pal_tablet_msgs.msg.FunctionalityStatus()
        _v3 = val1.errMessage
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v3.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v3.data = str[start:end]
        _v4 = val1.errStatus
        start = end
        end += 1
        (_v4.data,) = _get_struct_B().unpack(str[start:end])
        _v4.data = bool(_v4.data)
        self.messages.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      length = len(self.messages)
      buff.write(_struct_I.pack(length))
      for val1 in self.messages:
        _v5 = val1.errMessage
        _x = _v5.data
        length = len(_x)
        if python3 or type(_x) == unicode:
          _x = _x.encode('utf-8')
          length = len(_x)
        buff.write(struct.Struct('<I%ss'%length).pack(length, _x))
        _v6 = val1.errStatus
        _x = _v6.data
        buff.write(_get_struct_B().pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.messages is None:
        self.messages = None
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.messages = []
      for i in range(0, length):
        val1 = pal_tablet_msgs.msg.FunctionalityStatus()
        _v7 = val1.errMessage
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          _v7.data = str[start:end].decode('utf-8', 'rosmsg')
        else:
          _v7.data = str[start:end]
        _v8 = val1.errStatus
        start = end
        end += 1
        (_v8.data,) = _get_struct_B().unpack(str[start:end])
        _v8.data = bool(_v8.data)
        self.messages.append(val1)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
